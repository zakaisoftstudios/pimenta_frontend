{"ast":null,"code":"var React = require('react');\nvar t = require('tcomb-validation');\nfunction getMessage(errors, what, displayName, type) {\n  return ['Invalid ' + what + ' supplied to ' + displayName + ', should be a ' + t.getTypeName(type) + '.\\n', 'Detected errors (' + errors.length + '):\\n'].concat(errors.map(function (e, i) {\n    return ' ' + (i + 1) + '. ' + e.message;\n  })).join('\\n') + '\\n\\n';\n}\n\n//\n// main function\n//\n\nfunction getPropTypes(type, options) {\n  // getPropTypes can also accept a dictionary prop -> type\n  if (t.Object.is(type)) {\n    type = t.struct(type);\n  }\n  var isSubtype = type.meta.kind === 'subtype';\n\n  // here type should be a struct or a subtype of a struct\n  if (process.env.NODE_ENV !== 'production') {\n    t.assert(t.isType(type), '[tcomb-react] Invalid argument type supplied to propTypes()');\n  }\n  var propTypes = {};\n  var innerType = isSubtype ? type.meta.type : type;\n  if (innerType.meta.kind === 'struct' || innerType.meta.kind === 'interface') {\n    var props = innerType.meta.props;\n    Object.keys(props).forEach(function (k) {\n      var propType = props[k];\n      var _checkPropType;\n      if (process.env.NODE_ENV !== 'production') {\n        // React custom prop validators\n        // see http://facebook.github.io/react/docs/reusable-components.html\n        _checkPropType = function checkPropType(values, prop, displayName) {\n          var value = values[prop];\n          var validationResult = t.validate(value, propType);\n          if (!validationResult.isValid()) {\n            var message = getMessage(validationResult.errors, 'prop ' + t.stringify(prop), displayName, propType);\n\n            // add a readable entry in the call stack\n            // when \"Pause on exceptions\" and \"Pause on Caught Exceptions\"\n            // are enabled in Chrome DevTools\n            _checkPropType.displayName = message;\n            t.fail(message);\n          }\n        };\n      } else {\n        _checkPropType = function _checkPropType() {};\n      }\n\n      // attach the original tcomb definition, so other components can read it\n      // via `propTypes.whatever.tcomb`\n      _checkPropType.tcomb = propType;\n      propTypes[k] = _checkPropType;\n    });\n    if (process.env.NODE_ENV !== 'production') {\n      options = options || {};\n      // allows to opt-out additional props check\n      if (options.strict !== false) {\n        propTypes.__strict__ = function (values, prop, displayName) {\n          var extra = [];\n          for (var k in values) {\n            // __strict__ and __subtype__ keys are excluded in order to support the React context feature\n            if (k !== '__strict__' && k !== '__subtype__' && values.hasOwnProperty(k) && !props.hasOwnProperty(k)) {\n              extra.push(k);\n            }\n          }\n          if (extra.length > 0) {\n            t.fail('Invalid additional prop(s):\\n\\n' + t.stringify(extra) + '\\n\\nsupplied to ' + displayName + '.');\n          }\n        };\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      propTypes.__generictype__ = function (values, prop, displayName) {\n        var validationResult = t.validate(values, innerType);\n        if (!validationResult.isValid()) {\n          t.fail(getMessage(validationResult.errors, 'props', displayName, innerType));\n        }\n      };\n    }\n  }\n  if (isSubtype) {\n    if (process.env.NODE_ENV !== 'production') {\n      propTypes.__subtype__ = function (values, prop, displayName) {\n        if (!type.meta.predicate(values)) {\n          t.fail('Invalid props:\\n\\n' + t.stringify(values) + '\\n\\nsupplied to ' + displayName + ', should be a ' + t.getTypeName(type) + ' subtype.');\n        }\n      };\n    } else {\n      propTypes.__subtype__ = function () {};\n    }\n\n    // attach the original predicate, so other components can read it\n    // via `propTypes.__subtype__.predicate`\n    propTypes.__subtype__.predicate = type.meta.predicate;\n  }\n  return propTypes;\n}\n\n//\n// ES7 decorator\n//\n\nfunction es7PropsDecorator(type, options) {\n  return function (Component) {\n    Component.propTypes = getPropTypes(type, options);\n  };\n}\n\n//\n// Built-in types\n//\n\nvar ReactElement = t.irreducible('ReactElement', React.isValidElement);\nvar ReactNode = t.irreducible('ReactNode', function (x) {\n  return t.Str.is(x) || t.Num.is(x) || ReactElement.is(x) || t.list(ReactNode).is(x);\n});\nvar ReactChild = t.irreducible('ReactChild', function (x) {\n  return ReactNode.is(x) || t.Bool.is(x) || t.Nil.is(x);\n});\nvar ReactChildren = t.irreducible('ReactChildren', function (x) {\n  return ReactChild.is(x) || t.list(ReactChildren).is(x);\n});\nt.ReactElement = ReactElement; // deprecated\nt.ReactNode = ReactNode; // deprecated\nt.ReactChild = ReactChild; // deprecated\nt.ReactChildren = ReactChildren; // deprecated\n\nmodule.exports = {\n  t: t,\n  // deprecated\n  propTypes: getPropTypes,\n  props: es7PropsDecorator,\n  ReactElement: ReactElement,\n  ReactNode: ReactNode,\n  ReactChild: ReactChild,\n  ReactChildren: ReactChildren,\n  ReactElementT: ReactElement,\n  ReactNodeT: ReactNode,\n  ReactChildT: ReactChild,\n  ReactChildrenT: ReactChildren\n};","map":null,"metadata":{},"sourceType":"script"}