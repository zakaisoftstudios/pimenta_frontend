{"ast":null,"code":"var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar isMaybe = require('./isMaybe');\nvar isIdentity = require('./isIdentity');\nvar Any = require('./Any');\nvar create = require('./create');\nvar Nil = require('./Nil');\nvar forbidNewOperator = require('./forbidNewOperator');\nvar is = require('./is');\nvar getTypeName = require('./getTypeName');\nfunction getDefaultName(type) {\n  return '?' + getTypeName(type);\n}\nfunction maybe(type, name) {\n  if (isMaybe(type) || type === Any || type === Nil) {\n    // makes the combinator idempotent and handle Any, Nil\n    return type;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(type), function () {\n      return 'Invalid argument type ' + assert.stringify(type) + ' supplied to maybe(type, [name]) combinator (expected a type)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to maybe(type, [name]) combinator (expected a string)';\n    });\n  }\n  var displayName = name || getDefaultName(type);\n  var identity = isIdentity(type);\n  function Maybe(value, path) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (identity) {\n        forbidNewOperator(this, Maybe);\n      }\n    }\n    return Nil.is(value) ? value : create(type, value, path);\n  }\n  Maybe.meta = {\n    kind: 'maybe',\n    type: type,\n    name: name,\n    identity: identity\n  };\n  Maybe.displayName = displayName;\n  Maybe.is = function (x) {\n    return Nil.is(x) || is(x, type);\n  };\n  return Maybe;\n}\nmaybe.getDefaultName = getDefaultName;\nmodule.exports = maybe;","map":null,"metadata":{},"sourceType":"script"}