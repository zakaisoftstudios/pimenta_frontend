{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nimport React from 'react';\nimport 'wicg-inert';\nimport PropTypes from 'prop-types';\nimport ExecutionEnvironment from 'exenv';\nimport Animate from 'react-move/Animate';\nimport * as easing from 'd3-ease';\nimport { PagingDots, PreviousButton, NextButton } from './default-controls';\nimport Transitions from './all-transitions';\nimport AnnounceSlide, { defaultRenderAnnounceSlideMessage } from './announce-slide';\nimport { addAccessibility, addEvent, removeEvent, getPropsByTransitionMode, swipeDirection, shouldUpdate, calcSomeInitialState } from './utilities/utilities';\nimport { getAlignmentOffset, getImgTagStyles, getDecoratorStyles, getSliderStyles, getFrameStyles, getTransitionProps } from './utilities/style-utilities';\nimport { getValidChildren, calculateSlideHeight } from './utilities/bootstrapping-utilities';\nvar Carousel = /*#__PURE__*/function (_React$Component) {\n  _inherits(Carousel, _React$Component);\n  var _super = _createSuper(Carousel);\n  function Carousel() {\n    var _this;\n    _classCallCheck(this, Carousel);\n    _this = _super.apply(this, arguments);\n    _this.displayName = 'Carousel';\n    _this.clickDisabled = false;\n    _this.latestTransitioningIndex = null;\n    _this.timers = [];\n    _this.touchObject = {};\n    _this.controlsMap = [{\n      funcName: 'renderTopLeftControls',\n      key: 'TopLeft'\n    }, {\n      funcName: 'renderTopCenterControls',\n      key: 'TopCenter'\n    }, {\n      funcName: 'renderTopRightControls',\n      key: 'TopRight'\n    }, {\n      funcName: 'renderCenterLeftControls',\n      key: 'CenterLeft'\n    }, {\n      funcName: 'renderCenterCenterControls',\n      key: 'CenterCenter'\n    }, {\n      funcName: 'renderCenterRightControls',\n      key: 'CenterRight'\n    }, {\n      funcName: 'renderBottomLeftControls',\n      key: 'BottomLeft'\n    }, {\n      funcName: 'renderBottomCenterControls',\n      key: 'BottomCenter'\n    }, {\n      funcName: 'renderBottomRightControls',\n      key: 'BottomRight'\n    }];\n    _this.keyCodeConfig = {\n      nextSlide: [39, 68, 38, 87],\n      previousSlide: [37, 65, 40, 83],\n      firstSlide: [81],\n      lastSlide: [69],\n      pause: [32]\n    };\n    _this.childNodesMutationObs = null;\n    _this.state = _objectSpread({\n      currentSlide: _this.props.slideIndex,\n      dragging: false,\n      easing: _this.props.disableAnimation ? '' : easing.easeCircleOut,\n      hasInteraction: false,\n      // to remove animation from the initial slide on the page load when non-default slideIndex is used\n      isWrappingAround: false,\n      left: 0,\n      resetWrapAroundPosition: false,\n      slideCount: getValidChildren(_this.props.children).length,\n      top: 0,\n      wrapToIndex: null,\n      hasFocus: false\n    }, calcSomeInitialState(_this.props));\n    _this.autoplayIterator = _this.autoplayIterator.bind(_assertThisInitialized(_this));\n    _this.calcSlideHeightAndWidth = _this.calcSlideHeightAndWidth.bind(_assertThisInitialized(_this));\n    _this.getChildNodes = _this.getChildNodes.bind(_assertThisInitialized(_this));\n    _this.getMouseEvents = _this.getMouseEvents.bind(_assertThisInitialized(_this));\n    _this.getOffsetDeltas = _this.getOffsetDeltas.bind(_assertThisInitialized(_this));\n    _this.getTargetLeft = _this.getTargetLeft.bind(_assertThisInitialized(_this));\n    _this.getTouchEvents = _this.getTouchEvents.bind(_assertThisInitialized(_this));\n    _this.blockEvent = _this.blockEvent.bind(_assertThisInitialized(_this));\n    _this.goToSlide = _this.goToSlide.bind(_assertThisInitialized(_this));\n    _this.handleFocus = _this.handleFocus.bind(_assertThisInitialized(_this));\n    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_this));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.handleKeyPress = _this.handleKeyPress.bind(_assertThisInitialized(_this));\n    _this.handleMouseOut = _this.handleMouseOut.bind(_assertThisInitialized(_this));\n    _this.handleMouseOver = _this.handleMouseOver.bind(_assertThisInitialized(_this));\n    _this.handleSwipe = _this.handleSwipe.bind(_assertThisInitialized(_this));\n    _this.nextSlide = _this.nextSlide.bind(_assertThisInitialized(_this));\n    _this.onResize = _this.onResize.bind(_assertThisInitialized(_this));\n    _this.onVisibilityChange = _this.onVisibilityChange.bind(_assertThisInitialized(_this));\n    _this.previousSlide = _this.previousSlide.bind(_assertThisInitialized(_this));\n    _this.renderControls = _this.renderControls.bind(_assertThisInitialized(_this));\n    _this.resetAutoplay = _this.resetAutoplay.bind(_assertThisInitialized(_this));\n    _this.setDimensions = _this.setDimensions.bind(_assertThisInitialized(_this));\n    _this.setLeft = _this.setLeft.bind(_assertThisInitialized(_this));\n    _this.setSlideHeightAndWidth = _this.setSlideHeightAndWidth.bind(_assertThisInitialized(_this));\n    _this.startAutoplay = _this.startAutoplay.bind(_assertThisInitialized(_this));\n    _this.stopAutoplay = _this.stopAutoplay.bind(_assertThisInitialized(_this));\n    _this.establishChildNodesMutationObserver = _this.establishChildNodesMutationObserver.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  _createClass(Carousel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // see https://github.com/facebook/react/issues/3417#issuecomment-121649937\n      this.mounted = true;\n      this.setLeft();\n      this.setDimensions();\n      this.bindEvents();\n      this.establishChildNodesMutationObserver();\n      if (this.props.autoplay) {\n        this.startAutoplay();\n      }\n      var keyCodeConfig = _extends({}, this.keyCodeConfig, this.props.keyCodeConfig);\n      this.keyCodeMap = this.getKeyCodeMap(keyCodeConfig);\n      this.getLockScrollEvents().lockTouchScroll();\n      this.initializeCarouselHeight();\n    } // eslint-disable-next-line complexity\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var slideChanged = prevState.currentSlide !== this.state.currentSlide;\n      var heightModeChanged = prevProps.heightMode !== this.props.heightMode;\n      var axisChanged = prevProps.vertical !== this.props.vertical;\n      var childrenChanged = prevProps.children !== this.props.children;\n      if (axisChanged) {\n        this.onResize();\n      } else if (slideChanged || heightModeChanged) {\n        var image = this.getCurrentChildNodeImg();\n        if (image) {\n          image.addEventListener('load', this.setSlideHeightAndWidth);\n          image.removeEventListener('load', this.setSlideHeightAndWidth);\n        } else {\n          this.setSlideHeightAndWidth();\n        }\n      }\n      if (this.state.isWrappingAround) {\n        this.isWrapped = true;\n      }\n      var prevSlideCount = getValidChildren(prevProps.children).length;\n      var slideCount = getValidChildren(this.props.children).length;\n      var slideCountChanged = prevSlideCount !== slideCount;\n      if (slideCountChanged) {\n        this.setState({\n          slideCount: slideCount,\n          currentSlide: this.props.slideIndex\n        });\n      }\n      var _this$calcSlideHeight = this.calcSlideHeightAndWidth(),\n        slideHeight = _this$calcSlideHeight.slideHeight;\n      var heightMismatches = slideHeight !== prevState.slideHeight;\n      if (this.mounted && heightMismatches) {\n        this.setDimensions();\n      } else {\n        var updateDimensions = slideCountChanged || shouldUpdate(prevProps, this.props, ['cellSpacing', 'vertical', 'slideWidth', 'slideHeight', 'heightMode', 'slidesToScroll', 'slidesToShow', 'transitionMode', 'cellAlign']);\n        if (updateDimensions) {\n          this.setDimensions(this.props);\n        }\n      }\n      if (childrenChanged) {\n        this.initializeCarouselHeight();\n      }\n      if (slideCountChanged && slideCount <= this.state.currentSlide) {\n        this.goToSlide(Math.max(slideCount - 1, 0), this.props);\n      } else if (prevProps.slideIndex !== this.props.slideIndex && this.props.slideIndex !== this.state.currentSlide && !this.state.isWrappingAround) {\n        this.goToSlide(this.props.slideIndex, this.props);\n      }\n      if (prevProps.autoplay !== this.props.autoplay) {\n        if (this.props.autoplay) {\n          this.startAutoplay();\n        } else {\n          this.stopAutoplay();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unbindEvents();\n      this.disconnectChildNodesMutationObserver();\n      this.stopAutoplay(); // see https://github.com/facebook/react/issues/3417#issuecomment-121649937\n\n      this.mounted = false;\n      for (var i = 0; i < this.timers.length; i++) {\n        clearTimeout(this.timers[i]);\n      }\n      this.getLockScrollEvents().unlockTouchScroll();\n    }\n  }, {\n    key: \"initializeCarouselHeight\",\n    value: function initializeCarouselHeight() {\n      var _this2 = this;\n      var initialDelay = 200;\n      var timesChecked = 0;\n      var initializeHeight = function initializeHeight(delay) {\n        _this2.timers.push(setTimeout(function () {\n          // If slideHeight is greater than zero and matches calculated slideHeight,\n          // assume the app has been initialized.  If not,\n          // keep trying to set dimensions until things work.\n          var _this2$calcSlideHeigh = _this2.calcSlideHeightAndWidth(),\n            slideHeight = _this2$calcSlideHeigh.slideHeight;\n          if (_this2.state.slideHeight > 0 && _this2.state.slideHeight === slideHeight) {\n            return;\n          }\n          _this2.setDimensions();\n          ++timesChecked; // Increase delay per attempt so the checks\n          // slowly decrease if content is taking forever to load.\n          //\n          // If we've checked more than 10 times, it's probably never going\n          // to load, so we stop checking. Otherwise, the page will freeze\n          // after a long period:\n          // See https://github.com/FormidableLabs/nuka-carousel/issues/798\n\n          if (timesChecked < 10) {\n            // Add exponential backoff to check more slowly\n            initializeHeight(delay * 1.5);\n          }\n        }, delay));\n      };\n      initializeHeight(initialDelay);\n    }\n  }, {\n    key: \"establishChildNodesMutationObserver\",\n    value: function establishChildNodesMutationObserver() {\n      var _this3 = this;\n      var childNodes = this.getChildNodes();\n      if (childNodes.length && 'MutationObserver' in window) {\n        this.childNodesMutationObs = new MutationObserver(function () {\n          _this3.setSlideHeightAndWidth();\n        });\n        var observeChildNodeMutation = function observeChildNodeMutation(node) {\n          _this3.childNodesMutationObs.observe(node, {\n            attributeFilter: ['style'],\n            attributeOldValue: false,\n            attributes: true,\n            characterData: false,\n            characterDataOldValue: false,\n            childList: false,\n            subtree: false\n          });\n        };\n        var childNodesArray = Array.from(childNodes);\n        for (var _i = 0, _childNodesArray = childNodesArray; _i < _childNodesArray.length; _i++) {\n          var childNode = _childNodesArray[_i];\n          observeChildNodeMutation(childNode);\n        }\n      }\n    }\n  }, {\n    key: \"disconnectChildNodesMutationObserver\",\n    value: function disconnectChildNodesMutationObserver() {\n      if (this.childNodesMutationObs instanceof MutationObserver) {\n        this.childNodesMutationObs.disconnect();\n      }\n    }\n  }, {\n    key: \"blockEvent\",\n    value: function blockEvent(e) {\n      if (this.state.dragging) {\n        var direction = swipeDirection(this.touchObject.startX, e.touches[0].pageX, this.touchObject.startY, e.touches[0].pageY, this.props.vertical);\n        if (direction !== 0) {\n          e.preventDefault();\n        }\n      }\n    }\n  }, {\n    key: \"getLockScrollEvents\",\n    value: function getLockScrollEvents() {\n      var _this4 = this;\n      var lockTouchScroll = function lockTouchScroll() {\n        document.addEventListener('touchmove', _this4.blockEvent, {\n          passive: false\n        });\n      };\n      var unlockTouchScroll = function unlockTouchScroll() {\n        document.removeEventListener('touchmove', _this4.blockEvent, {\n          passive: false\n        });\n      };\n      return {\n        lockTouchScroll: lockTouchScroll,\n        unlockTouchScroll: unlockTouchScroll\n      };\n    }\n  }, {\n    key: \"getTouchEvents\",\n    value: function getTouchEvents() {\n      var _this5 = this;\n      if (this.props.swiping === false) {\n        return {\n          onTouchStart: this.handleMouseOver,\n          onTouchEnd: this.handleMouseOut\n        };\n      }\n      return {\n        onTouchStart: function onTouchStart(e) {\n          //detect pinch zoom\n          if (e.touches.length === 2) {\n            _this5.handleMouseOver();\n            return;\n          }\n          _this5.touchObject = {\n            startX: e.touches[0].pageX,\n            startY: e.touches[0].pageY\n          };\n          _this5.handleMouseOver();\n          _this5.setState({\n            dragging: true\n          });\n        },\n        onTouchMove: function onTouchMove(e) {\n          if (e.touches.length === 2) {\n            return;\n          }\n          var direction = swipeDirection(_this5.touchObject.startX, e.touches[0].pageX, _this5.touchObject.startY, e.touches[0].pageY, _this5.props.vertical);\n          var length = _this5.props.vertical ? Math.round(Math.sqrt(Math.pow(e.touches[0].pageY - _this5.touchObject.startY, 2))) : Math.round(Math.sqrt(Math.pow(e.touches[0].pageX - _this5.touchObject.startX, 2)));\n          if (length >= 10) {\n            if (_this5.clickDisabled === false) _this5.props.onDragStart(e);\n            _this5.clickDisabled = true;\n          }\n          _this5.touchObject = {\n            startX: _this5.touchObject.startX,\n            startY: _this5.touchObject.startY,\n            endX: e.touches[0].pageX,\n            endY: e.touches[0].pageY,\n            length: length,\n            direction: direction\n          };\n          _this5.setState({\n            left: _this5.props.vertical ? 0 : _this5.getTargetLeft(_this5.touchObject.length * _this5.touchObject.direction),\n            top: _this5.props.vertical ? _this5.getTargetLeft(_this5.touchObject.length * _this5.touchObject.direction) : 0\n          });\n        },\n        onTouchEnd: function onTouchEnd(e) {\n          if (e.touches.length === 2) {\n            _this5.handleMouseOut();\n            return;\n          }\n          _this5.handleSwipe(e);\n          _this5.handleMouseOut();\n        },\n        onTouchCancel: function onTouchCancel(e) {\n          _this5.handleSwipe(e);\n        }\n      };\n    }\n  }, {\n    key: \"getMouseEvents\",\n    value: function getMouseEvents() {\n      var _this6 = this;\n      if (this.props.dragging === false) {\n        return {\n          onMouseOver: this.handleMouseOver,\n          onMouseOut: this.handleMouseOut\n        };\n      }\n      return {\n        onMouseOver: this.handleMouseOver,\n        onMouseOut: this.handleMouseOut,\n        onMouseDown: function onMouseDown(e) {\n          if (e.preventDefault) {\n            e.preventDefault();\n          }\n          _this6.touchObject = {\n            startX: e.clientX,\n            startY: e.clientY\n          };\n          _this6.setState({\n            dragging: true\n          });\n        },\n        onMouseMove: function onMouseMove(e) {\n          if (!_this6.state.dragging) {\n            return;\n          }\n          var direction = swipeDirection(_this6.touchObject.startX, e.clientX, _this6.touchObject.startY, e.clientY, _this6.props.vertical);\n          if (direction !== 0) {\n            e.preventDefault();\n          }\n          var length = _this6.props.vertical ? Math.round(Math.sqrt(Math.pow(e.clientY - _this6.touchObject.startY, 2))) : Math.round(Math.sqrt(Math.pow(e.clientX - _this6.touchObject.startX, 2))); // prevents disabling click just because mouse moves a fraction of a pixel\n\n          if (length >= 10) {\n            if (_this6.clickDisabled === false) _this6.props.onDragStart(e);\n            _this6.clickDisabled = true;\n          }\n          _this6.touchObject = {\n            startX: _this6.touchObject.startX,\n            startY: _this6.touchObject.startY,\n            endX: e.clientX,\n            endY: e.clientY,\n            length: length,\n            direction: direction\n          };\n          _this6.setState({\n            left: _this6.props.vertical ? 0 : _this6.getTargetLeft(_this6.touchObject.length * _this6.touchObject.direction),\n            top: _this6.props.vertical ? _this6.getTargetLeft(_this6.touchObject.length * _this6.touchObject.direction) : 0\n          });\n        },\n        onMouseUp: function onMouseUp(e) {\n          if (_this6.touchObject.length === 0 || _this6.touchObject.length === undefined) {\n            _this6.setState({\n              dragging: false\n            });\n            return;\n          }\n          _this6.handleSwipe(e);\n        },\n        onMouseLeave: function onMouseLeave(e) {\n          if (!_this6.state.dragging) {\n            return;\n          }\n          _this6.handleSwipe(e);\n        }\n      };\n    }\n  }, {\n    key: \"pauseAutoplay\",\n    value: function pauseAutoplay() {\n      if (this.props.autoplay) {\n        this.autoplayPaused = true;\n        this.stopAutoplay();\n      }\n    }\n  }, {\n    key: \"unpauseAutoplay\",\n    value: function unpauseAutoplay() {\n      if (this.props.autoplay && this.autoplayPaused) {\n        this.startAutoplay();\n        this.autoplayPaused = null;\n      }\n    }\n  }, {\n    key: \"handleMouseOver\",\n    value: function handleMouseOver() {\n      if (this.props.pauseOnHover) {\n        this.pauseAutoplay();\n      }\n    }\n  }, {\n    key: \"handleMouseOut\",\n    value: function handleMouseOut() {\n      if (this.autoplayPaused) {\n        this.unpauseAutoplay();\n      }\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus() {\n      this.setState({\n        hasFocus: true\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur() {\n      this.setState({\n        hasFocus: false\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      if (this.clickDisabled === true) {\n        if (event.metaKey || event.shiftKey || event.altKey || event.ctrlKey) {\n          return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.nativeEvent) {\n          event.nativeEvent.stopPropagation();\n        }\n      }\n    }\n  }, {\n    key: \"handleSwipe\",\n    value: function handleSwipe() {\n      var _this7 = this;\n      var slidesToShow = this.state.slidesToShow;\n      if (this.props.slidesToScroll === 'auto') {\n        slidesToShow = this.state.slidesToScroll;\n      }\n      var touchLength = this.touchObject.length || 0; // touchLength must be longer than 1/5 the slideWidth / slidesToShow\n      // for swiping to be initiated\n\n      if (touchLength > this.state.slideWidth / slidesToShow / 5) {\n        if (this.touchObject.direction === 1) {\n          if (this.state.currentSlide + 1 >= this.state.slideCount && !this.props.wrapAround) {\n            this.setState({\n              easing: easing[this.props.edgeEasing]\n            });\n          } else {\n            this.nextSlide();\n          }\n        } else if (this.touchObject.direction === -1) {\n          if (this.state.currentSlide <= 0 && !this.props.wrapAround) {\n            this.setState({\n              easing: easing[this.props.edgeEasing]\n            });\n          } else {\n            this.previousSlide();\n          }\n        }\n      } else if (touchLength > 0) {\n        this.goToSlide(this.state.currentSlide);\n      } // wait for `handleClick` event before resetting clickDisabled\n\n      this.timers.push(setTimeout(function () {\n        _this7.clickDisabled = false;\n      }, 0));\n      this.touchObject = {};\n      this.setState({\n        dragging: false\n      });\n    } // eslint-disable-next-line complexity\n  }, {\n    key: \"handleKeyPress\",\n    value: function handleKeyPress(e) {\n      if (this.state.hasFocus && this.props.enableKeyboardControls) {\n        var actionName = this.keyCodeMap[e.keyCode];\n        switch (actionName) {\n          case 'nextSlide':\n            this.nextSlide();\n            break;\n          case 'previousSlide':\n            this.previousSlide();\n            break;\n          case 'firstSlide':\n            this.goToSlide(0, this.props);\n            break;\n          case 'lastSlide':\n            this.goToSlide(this.state.slideCount - 1, this.props);\n            break;\n          case 'pause':\n            if (this.state.pauseOnHover && this.props.autoplay) {\n              this.setState({\n                pauseOnHover: false\n              });\n              this.pauseAutoplay();\n              break;\n            } else {\n              this.setState({\n                pauseOnHover: true\n              });\n              this.unpauseAutoplay();\n              break;\n            }\n        }\n      }\n    }\n  }, {\n    key: \"getKeyCodeMap\",\n    value: function getKeyCodeMap(keyCodeConfig) {\n      var keyCodeMap = {};\n      Object.keys(keyCodeConfig).forEach(function (actionName) {\n        keyCodeConfig[actionName].forEach(function (keyCode) {\n          return keyCodeMap[keyCode] = actionName;\n        });\n      });\n      return keyCodeMap;\n    }\n  }, {\n    key: \"autoplayIterator\",\n    value: function autoplayIterator() {\n      if (this.props.wrapAround) {\n        if (this.props.autoplayReverse) {\n          this.previousSlide();\n        } else {\n          this.nextSlide();\n        }\n        return;\n      }\n      if (this.props.autoplayReverse) {\n        if (this.state.currentSlide !== 0) {\n          this.previousSlide();\n        } else {\n          this.stopAutoplay();\n        }\n      } else if (this.state.currentSlide !== this.state.slideCount - this.state.slidesToShow) {\n        this.nextSlide();\n      } else {\n        this.stopAutoplay();\n      }\n    }\n  }, {\n    key: \"startAutoplay\",\n    value: function startAutoplay() {\n      this.autoplayID = setInterval(this.autoplayIterator, this.props.autoplayInterval);\n    }\n  }, {\n    key: \"resetAutoplay\",\n    value: function resetAutoplay() {\n      if (this.props.autoplay && !this.autoplayPaused) {\n        this.stopAutoplay();\n        this.startAutoplay();\n      }\n    }\n  }, {\n    key: \"stopAutoplay\",\n    value: function stopAutoplay() {\n      if (this.autoplayID) {\n        clearInterval(this.autoplayID);\n      }\n    } // Animation Method\n  }, {\n    key: \"getTargetLeft\",\n    value: function getTargetLeft(touchOffset, slide) {\n      var target = slide || this.state.currentSlide;\n      var offset = getAlignmentOffset(target, _objectSpread(_objectSpread({}, this.props), this.state));\n      var left = this.state.slideWidth * target;\n      var lastSlide = this.state.currentSlide > 0 && target + this.state.slidesToScroll >= this.state.slideCount;\n      if (lastSlide && !this.props.wrapAround && this.props.scrollMode === 'remainder') {\n        left = this.state.slideWidth * this.state.slideCount - this.state.frameWidth;\n        offset = 0;\n        offset -= this.props.cellSpacing * (this.state.slideCount - 1);\n      }\n      if (!isNaN(touchOffset)) {\n        offset -= touchOffset;\n      } else {\n        offset -= 0;\n      }\n      return (left - offset) * -1;\n    }\n  }, {\n    key: \"getOffsetDeltas\",\n    value: function getOffsetDeltas() {\n      var offset = 0;\n      if (this.state.isWrappingAround) {\n        offset = this.getTargetLeft(null, this.state.wrapToIndex);\n      } else {\n        offset = this.getTargetLeft(this.touchObject.length * this.touchObject.direction);\n      }\n      return {\n        tx: [this.props.vertical ? 0 : offset],\n        ty: [this.props.vertical ? offset : 0]\n      };\n    }\n  }, {\n    key: \"isEdgeSwiping\",\n    value: function isEdgeSwiping() {\n      var _this$state = this.state,\n        currentSlide = _this$state.currentSlide,\n        slideCount = _this$state.slideCount,\n        slideWidth = _this$state.slideWidth,\n        slideHeight = _this$state.slideHeight,\n        slidesToShow = _this$state.slidesToShow;\n      var _this$getOffsetDeltas = this.getOffsetDeltas(),\n        tx = _this$getOffsetDeltas.tx,\n        ty = _this$getOffsetDeltas.ty;\n      var offset = getAlignmentOffset(currentSlide, _objectSpread(_objectSpread({}, this.props), this.state));\n      if (this.props.vertical) {\n        var rowHeight = slideHeight / slidesToShow;\n        var slidesLeftToShow = slideCount - slidesToShow;\n        var lastSlideLimit = rowHeight * slidesLeftToShow;\n        var offsetTy = ty[0] - offset; // returns true if ty offset is outside first or last slide\n\n        return offsetTy > 0 || -offsetTy > lastSlideLimit;\n      }\n      var offsetTx = tx[0] - offset; // returns true if tx offset is outside first or last slide\n\n      return offsetTx > 0 || -offsetTx > slideWidth * (slideCount - 1);\n    } // Action Methods\n  }, {\n    key: \"goToSlide\",\n    value: function goToSlide(index, props) {\n      var _this8 = this;\n      if (props === undefined) {\n        props = this.props;\n      }\n      this.latestTransitioningIndex = index;\n      this.setState({\n        hasInteraction: true,\n        easing: easing[props.easing]\n      });\n      var previousSlide = this.state.currentSlide;\n      if (index >= this.state.slideCount || index < 0) {\n        if (!props.wrapAround) {\n          return;\n        }\n        if (index >= this.state.slideCount) {\n          props.beforeSlide(this.state.currentSlide, 0);\n          this.setState(function (prevState) {\n            return {\n              left: props.vertical ? 0 : _this8.getTargetLeft(_this8.state.slideWidth, prevState.currentSlide),\n              top: props.vertical ? _this8.getTargetLeft(_this8.state.slideWidth, prevState.currentSlide) : 0,\n              currentSlide: 0,\n              isWrappingAround: true,\n              wrapToIndex: _this8.state.slideCount\n            };\n          }, function () {\n            _this8.timers.push(setTimeout(function () {\n              if (index === _this8.latestTransitioningIndex) {\n                _this8.resetAutoplay();\n                if (index !== previousSlide) {\n                  _this8.props.afterSlide(0);\n                }\n              }\n            }, props.speed));\n          });\n          return;\n        } else {\n          var endSlide = index < 0 ? this.state.slideCount + index : this.state.slideCount - this.state.slidesToScroll;\n          props.beforeSlide(this.state.currentSlide, endSlide);\n          this.setState(function (prevState) {\n            return {\n              left: props.vertical ? 0 : _this8.getTargetLeft(0, prevState.currentSlide),\n              top: props.vertical ? _this8.getTargetLeft(0, prevState.currentSlide) : 0,\n              currentSlide: endSlide,\n              isWrappingAround: true,\n              wrapToIndex: index\n            };\n          }, function () {\n            _this8.timers.push(setTimeout(function () {\n              if (index === _this8.latestTransitioningIndex) {\n                _this8.resetAutoplay();\n                if (index !== previousSlide) {\n                  _this8.props.afterSlide(_this8.state.slideCount - 1);\n                }\n              }\n            }, props.speed));\n          });\n          return;\n        }\n      }\n      this.props.beforeSlide(this.state.currentSlide, index);\n      this.setState({\n        currentSlide: index\n      }, function () {\n        _this8.timers.push(setTimeout(function () {\n          if (index === _this8.latestTransitioningIndex) {\n            _this8.resetAutoplay();\n            if (index !== previousSlide) {\n              _this8.props.afterSlide(index);\n            }\n          }\n        }, props.speed));\n      });\n    }\n  }, {\n    key: \"nextSlide\",\n    value: function nextSlide() {\n      var _this$state2 = this.state,\n        slidesToScroll = _this$state2.slidesToScroll,\n        currentSlide = _this$state2.currentSlide,\n        slideWidth = _this$state2.slideWidth,\n        slideCount = _this$state2.slideCount;\n      var targetSlideIndex = currentSlide + slidesToScroll;\n      var slidesToShow = this.state.slidesToShow;\n      if (this.props.slidesToScroll === 'auto') {\n        var swipeDistance = this.touchObject.length;\n        if (swipeDistance > 0) {\n          targetSlideIndex = Math.round(swipeDistance / slideWidth) + currentSlide;\n        } else {\n          slidesToShow = slidesToScroll;\n        }\n      }\n      if (currentSlide >= slideCount - slidesToShow && !this.props.wrapAround && this.props.cellAlign === 'left') {\n        return;\n      }\n      if (this.props.wrapAround) {\n        this.goToSlide(targetSlideIndex);\n      } else {\n        if (this.props.slideWidth !== 1) {\n          this.goToSlide(targetSlideIndex);\n          return;\n        }\n        var offset = targetSlideIndex;\n        var leftAlignSlideIndex = this.props.scrollMode === 'page' ? offset : Math.min(offset, slideCount - Math.floor(slidesToShow));\n        var nextSlideIndex = this.props.cellAlign !== 'left' ? offset : leftAlignSlideIndex; // If nextSlideIndex is larger than last index, then\n        // just navigate to last index\n\n        this.goToSlide(Math.min(nextSlideIndex, slideCount - 1));\n      }\n    }\n  }, {\n    key: \"previousSlide\",\n    value: function previousSlide() {\n      var _this$state3 = this.state,\n        slidesToScroll = _this$state3.slidesToScroll,\n        slideWidth = _this$state3.slideWidth,\n        currentSlide = _this$state3.currentSlide;\n      var targetSlideIndex = currentSlide - slidesToScroll;\n      var swipeDistance = this.touchObject.length;\n      if (this.props.slidesToScroll === 'auto' && swipeDistance > 0) {\n        targetSlideIndex = currentSlide - Math.round(swipeDistance / slideWidth);\n      }\n      if (currentSlide <= 0 && !this.props.wrapAround) {\n        return;\n      }\n      if (this.props.wrapAround) {\n        this.goToSlide(targetSlideIndex);\n      } else {\n        this.goToSlide(Math.max(0, targetSlideIndex));\n      }\n    } // Bootstrapping\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      if (ExecutionEnvironment.canUseDOM) {\n        addEvent(window, 'resize', this.onResize);\n        addEvent(document, 'visibilitychange', this.onVisibilityChange);\n        addEvent(document, 'keydown', this.handleKeyPress);\n      }\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize() {\n      this.setDimensions(null, this.props.onResize);\n    }\n  }, {\n    key: \"onVisibilityChange\",\n    value: function onVisibilityChange() {\n      if (document.hidden) {\n        this.pauseAutoplay();\n      } else {\n        this.unpauseAutoplay();\n      }\n    }\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {\n      if (ExecutionEnvironment.canUseDOM) {\n        removeEvent(window, 'resize', this.onResize);\n        removeEvent(document, 'visibilitychange', this.onVisibilityChange);\n        removeEvent(document, 'keydown', this.handleKeyPress);\n      }\n    }\n  }, {\n    key: \"calcSlideHeightAndWidth\",\n    value: function calcSlideHeightAndWidth(props) {\n      // slide height\n      props = props || this.props;\n      var childNodes = this.getChildNodes();\n      var slideHeight = calculateSlideHeight(props, this.state, childNodes); //slide width\n\n      var _getPropsByTransition = getPropsByTransitionMode(props, ['slidesToShow']),\n        slidesToShow = _getPropsByTransition.slidesToShow;\n      var frame = this.frame;\n      var slideWidth;\n      if (this.props.animation === 'zoom') {\n        slideWidth = frame.offsetWidth - frame.offsetWidth * 15 / 100;\n      } else if (typeof props.slideWidth !== 'number') {\n        slideWidth = parseInt(props.slideWidth);\n      } else if (props.vertical) {\n        slideWidth = slideHeight / slidesToShow * props.slideWidth;\n      } else {\n        slideWidth = frame.offsetWidth / slidesToShow * props.slideWidth;\n      }\n      if (!props.vertical) {\n        slideWidth -= props.cellSpacing * ((100 - 100 / slidesToShow) / 100);\n      }\n      return {\n        slideHeight: slideHeight,\n        slideWidth: slideWidth\n      };\n    }\n  }, {\n    key: \"setSlideHeightAndWidth\",\n    value: function setSlideHeightAndWidth() {\n      var _this$calcSlideHeight2 = this.calcSlideHeightAndWidth(),\n        slideHeight = _this$calcSlideHeight2.slideHeight,\n        slideWidth = _this$calcSlideHeight2.slideWidth;\n      if (slideHeight !== this.state.slideHeight || slideWidth !== this.state.slideWidth || this.isWrapped) {\n        this.isWrapped = false;\n        this.setState({\n          slideHeight: slideHeight,\n          slideWidth: slideWidth\n        });\n      }\n    } // eslint-disable-next-line complexity\n  }, {\n    key: \"setDimensions\",\n    value: function setDimensions(props) {\n      var stateCb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n      props = props || this.props;\n      var _getPropsByTransition2 = getPropsByTransitionMode(props, ['slidesToShow', 'cellAlign', 'scrollMode']),\n        slidesToShow = _getPropsByTransition2.slidesToShow,\n        cellAlign = _getPropsByTransition2.cellAlign,\n        scrollMode = _getPropsByTransition2.scrollMode;\n      var frame = this.frame;\n      var _this$calcSlideHeight3 = this.calcSlideHeightAndWidth(props),\n        slideHeight = _this$calcSlideHeight3.slideHeight,\n        slideWidth = _this$calcSlideHeight3.slideWidth;\n      var frameHeight = slideHeight + props.cellSpacing * (slidesToShow - 1);\n      var frameWidth = props.vertical ? frameHeight : frame.offsetWidth;\n      var _getPropsByTransition3 = getPropsByTransitionMode(props, ['slidesToScroll']),\n        slidesToScroll = _getPropsByTransition3.slidesToScroll;\n      if (slidesToScroll === 'auto' || scrollMode === 'page') {\n        slidesToScroll = Math.floor(frameWidth / (slideWidth + props.cellSpacing));\n      }\n      if ((props.slideWidth !== 1 || props.cellSpacing > 0) && scrollMode === 'page' && cellAlign === 'left') {\n        slidesToShow = slidesToScroll;\n      }\n      this.setState({\n        frameWidth: frameWidth,\n        slideHeight: slideHeight,\n        slidesToScroll: slidesToScroll,\n        slidesToShow: slidesToShow,\n        slideWidth: slideWidth,\n        cellAlign: cellAlign\n      }, function () {\n        stateCb();\n      });\n    }\n  }, {\n    key: \"getChildNodes\",\n    value: function getChildNodes() {\n      return this.frame.childNodes[0].childNodes;\n    }\n  }, {\n    key: \"getCurrentChildNodeImg\",\n    value: function getCurrentChildNodeImg() {\n      var childNodes = this.getChildNodes();\n      var currentChildNode = childNodes[this.props.slideIndex];\n      return currentChildNode ? currentChildNode.getElementsByTagName('img')[0] : null;\n    }\n  }, {\n    key: \"setLeft\",\n    value: function setLeft() {\n      var newLeft = this.props.vertical ? 0 : this.getTargetLeft();\n      var newTop = this.props.vertical ? this.getTargetLeft() : 0;\n      if (newLeft !== this.state.left || newTop !== this.state.top) {\n        this.setState({\n          left: newLeft,\n          top: newTop\n        });\n      }\n    }\n  }, {\n    key: \"renderControls\",\n    value: function renderControls() {\n      var _this9 = this;\n      if (this.props.withoutControls) {\n        return this.controlsMap.map(function () {\n          return null;\n        });\n      } else {\n        return this.controlsMap.map(function (_ref) {\n          var funcName = _ref.funcName,\n            key = _ref.key;\n          var func = _this9.props[funcName];\n          var controlChildren = func && typeof func === 'function' && func({\n            cellAlign: _this9.props.cellAlign,\n            cellSpacing: _this9.props.cellSpacing,\n            currentSlide: _this9.state.currentSlide,\n            defaultControlsConfig: _this9.props.defaultControlsConfig,\n            frameWidth: _this9.state.frameWidth,\n            goToSlide: function goToSlide(index) {\n              return _this9.goToSlide(index);\n            },\n            left: _this9.state.left,\n            nextSlide: function nextSlide() {\n              return _this9.nextSlide();\n            },\n            previousSlide: function previousSlide() {\n              return _this9.previousSlide();\n            },\n            scrollMode: _this9.props.scrollMode,\n            slideCount: _this9.state.slideCount,\n            slidesToScroll: _this9.state.slidesToScroll,\n            slidesToShow: _this9.state.slidesToShow,\n            slideWidth: _this9.state.slideWidth,\n            top: _this9.state.top,\n            vertical: _this9.props.vertical,\n            wrapAround: _this9.props.wrapAround\n          });\n          return controlChildren && /*#__PURE__*/React.createElement(\"div\", {\n            key: key,\n            className: [\"slider-control-\".concat(key.toLowerCase()), _this9.props.defaultControlsConfig.containerClassName || ''].join(' ').trim(),\n            style: _objectSpread(_objectSpread({}, getDecoratorStyles(key)), _this9.props.getControlsContainerStyles(key))\n          }, controlChildren);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this10 = this;\n      var _this$state4 = this.state,\n        currentSlide = _this$state4.currentSlide,\n        slideCount = _this$state4.slideCount,\n        frameWidth = _this$state4.frameWidth,\n        hasInteraction = _this$state4.hasInteraction;\n      var _this$props = this.props,\n        disableAnimation = _this$props.disableAnimation,\n        frameOverflow = _this$props.frameOverflow,\n        framePadding = _this$props.framePadding,\n        renderAnnounceSlideMessage = _this$props.renderAnnounceSlideMessage,\n        slidesToShow = _this$props.slidesToShow,\n        vertical = _this$props.vertical;\n      var duration = this.state.dragging || !this.state.dragging && this.state.resetWrapAroundPosition && this.props.wrapAround || disableAnimation || !hasInteraction ? 0 : this.props.speed;\n      var frameStyles = getFrameStyles(frameOverflow, vertical, framePadding, frameWidth);\n      var touchEvents = this.getTouchEvents();\n      var mouseEvents = this.getMouseEvents();\n      var TransitionControl = Transitions[this.props.transitionMode];\n      var validChildren = getValidChildren(this.props.children);\n      var _this$getOffsetDeltas2 = this.getOffsetDeltas(),\n        _this$getOffsetDeltas3 = _slicedToArray(_this$getOffsetDeltas2.tx, 1),\n        startTx = _this$getOffsetDeltas3[0],\n        _this$getOffsetDeltas4 = _slicedToArray(_this$getOffsetDeltas2.ty, 1),\n        startTy = _this$getOffsetDeltas4[0];\n      return /*#__PURE__*/React.createElement(\"section\", {\n        className: ['slider', this.props.className || ''].join(' ').trim(),\n        onFocus: this.handleFocus,\n        \"aria-label\": \"carousel-slider\",\n        role: \"region\",\n        onBlur: this.handleBlur,\n        ref: this.props.innerRef,\n        tabIndex: 0,\n        style: _extends({}, getSliderStyles(this.props.width, this.props.height), this.props.style)\n      }, !this.props.autoplay && /*#__PURE__*/React.createElement(AnnounceSlide, {\n        message: renderAnnounceSlideMessage({\n          currentSlide: currentSlide,\n          slideCount: slideCount\n        })\n      }), /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: \"slider-frame\",\n        ref: function ref(frame) {\n          return _this10.frame = frame;\n        },\n        style: frameStyles\n      }, touchEvents, mouseEvents, {\n        onClickCapture: this.handleClick\n      }), /*#__PURE__*/React.createElement(Animate, {\n        show: true,\n        start: {\n          tx: startTx,\n          ty: startTy\n        },\n        update: function update() {\n          var _this10$getOffsetDelt = _this10.getOffsetDeltas(),\n            tx = _this10$getOffsetDelt.tx,\n            ty = _this10$getOffsetDelt.ty;\n          if (_this10.props.disableEdgeSwiping && !_this10.props.wrapAround && _this10.isEdgeSwiping()) {\n            return {};\n          } else {\n            return {\n              tx: tx,\n              ty: ty,\n              timing: {\n                duration: duration,\n                ease: _this10.state.easing\n              },\n              events: {\n                end: function end() {\n                  var newLeft = _this10.props.vertical ? 0 : _this10.getTargetLeft();\n                  var newTop = _this10.props.vertical ? _this10.getTargetLeft() : 0;\n                  if (newLeft !== _this10.state.left || newTop !== _this10.state.top) {\n                    _this10.setState({\n                      left: newLeft,\n                      top: newTop,\n                      isWrappingAround: false,\n                      resetWrapAroundPosition: true\n                    }, function () {\n                      _this10.setState({\n                        resetWrapAroundPosition: false\n                      });\n                    });\n                  }\n                }\n              }\n            };\n          }\n        }\n      }, function (_ref2) {\n        var tx = _ref2.tx,\n          ty = _ref2.ty;\n        return /*#__PURE__*/React.createElement(TransitionControl, _extends({}, getTransitionProps(_this10.props, _this10.state), {\n          deltaX: tx,\n          deltaY: ty\n        }), addAccessibility(validChildren, slidesToShow, currentSlide));\n      })), this.renderControls(), this.props.autoGenerateStyleTag && /*#__PURE__*/React.createElement(\"style\", {\n        type: \"text/css\",\n        dangerouslySetInnerHTML: {\n          __html: getImgTagStyles()\n        }\n      }));\n    }\n  }]);\n  return Carousel;\n}(React.Component);\nexport { Carousel as default };\nCarousel.propTypes = {\n  afterSlide: PropTypes.func,\n  animation: PropTypes.oneOf(['zoom']),\n  autoGenerateStyleTag: PropTypes.bool,\n  autoplay: PropTypes.bool,\n  autoplayInterval: PropTypes.number,\n  autoplayReverse: PropTypes.bool,\n  beforeSlide: PropTypes.func,\n  cellAlign: PropTypes.oneOf(['left', 'center', 'right']),\n  cellSpacing: PropTypes.number,\n  getControlsContainerStyles: PropTypes.func,\n  defaultControlsConfig: PropTypes.shape({\n    containerClassName: PropTypes.string,\n    nextButtonClassName: PropTypes.string,\n    nextButtonStyle: PropTypes.object,\n    nextButtonText: PropTypes.string,\n    prevButtonClassName: PropTypes.string,\n    prevButtonStyle: PropTypes.object,\n    prevButtonText: PropTypes.string,\n    pagingDotsContainerClassName: PropTypes.string,\n    pagingDotsClassName: PropTypes.string,\n    pagingDotsStyle: PropTypes.object\n  }),\n  disableAnimation: PropTypes.bool,\n  disableEdgeSwiping: PropTypes.bool,\n  dragging: PropTypes.bool,\n  easing: PropTypes.string,\n  edgeEasing: PropTypes.string,\n  enableKeyboardControls: PropTypes.bool,\n  frameOverflow: PropTypes.string,\n  framePadding: PropTypes.string,\n  height: PropTypes.string,\n  heightMode: PropTypes.oneOf(['first', 'current', 'max']),\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.elementType\n  })]),\n  initialSlideHeight: PropTypes.number,\n  initialSlideWidth: PropTypes.number,\n  keyCodeConfig: PropTypes.exact({\n    previousSlide: PropTypes.arrayOf(PropTypes.number),\n    nextSlide: PropTypes.arrayOf(PropTypes.number),\n    firstSlide: PropTypes.arrayOf(PropTypes.number),\n    lastSlide: PropTypes.arrayOf(PropTypes.number),\n    pause: PropTypes.arrayOf(PropTypes.number)\n  }),\n  onDragStart: PropTypes.func,\n  onResize: PropTypes.func,\n  opacityScale: PropTypes.number,\n  pauseOnHover: PropTypes.bool,\n  renderAnnounceSlideMessage: PropTypes.func,\n  renderBottomCenterControls: PropTypes.func,\n  renderBottomLeftControls: PropTypes.func,\n  renderBottomRightControls: PropTypes.func,\n  renderCenterCenterControls: PropTypes.func,\n  renderCenterLeftControls: PropTypes.func,\n  renderCenterRightControls: PropTypes.func,\n  renderTopCenterControls: PropTypes.func,\n  renderTopLeftControls: PropTypes.func,\n  renderTopRightControls: PropTypes.func,\n  scrollMode: PropTypes.oneOf(['page', 'remainder']),\n  slideIndex: PropTypes.number,\n  slideListMargin: PropTypes.number,\n  slideOffset: PropTypes.number,\n  slidesToScroll: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])]),\n  slidesToShow: PropTypes.number,\n  slideWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  speed: PropTypes.number,\n  swiping: PropTypes.bool,\n  transitionMode: PropTypes.oneOf(['scroll', 'fade', 'scroll3d']),\n  vertical: PropTypes.bool,\n  width: PropTypes.string,\n  withoutControls: PropTypes.bool,\n  wrapAround: PropTypes.bool\n};\nCarousel.defaultProps = {\n  afterSlide: function afterSlide() {},\n  autoGenerateStyleTag: true,\n  autoplay: false,\n  autoplayInterval: 3000,\n  autoplayReverse: false,\n  beforeSlide: function beforeSlide() {},\n  cellAlign: 'left',\n  cellSpacing: 0,\n  getControlsContainerStyles: function getControlsContainerStyles() {},\n  defaultControlsConfig: {},\n  disableAnimation: false,\n  disableEdgeSwiping: false,\n  dragging: true,\n  easing: 'easeCircleOut',\n  edgeEasing: 'easeElasticOut',\n  enableKeyboardControls: false,\n  frameOverflow: 'hidden',\n  framePadding: '0px',\n  height: 'inherit',\n  heightMode: 'max',\n  keyCodeConfig: {},\n  onDragStart: function onDragStart() {},\n  onResize: function onResize() {},\n  pauseOnHover: true,\n  renderAnnounceSlideMessage: defaultRenderAnnounceSlideMessage,\n  renderBottomCenterControls: function renderBottomCenterControls(props) {\n    return /*#__PURE__*/React.createElement(PagingDots, props);\n  },\n  renderCenterLeftControls: function renderCenterLeftControls(props) {\n    return /*#__PURE__*/React.createElement(PreviousButton, props);\n  },\n  renderCenterRightControls: function renderCenterRightControls(props) {\n    return /*#__PURE__*/React.createElement(NextButton, props);\n  },\n  scrollMode: 'remainder',\n  slideIndex: 0,\n  slideListMargin: 10,\n  slideOffset: 25,\n  slidesToScroll: 1,\n  slidesToShow: 1,\n  slideWidth: 1,\n  speed: 500,\n  style: {},\n  swiping: true,\n  transitionMode: 'scroll',\n  vertical: false,\n  width: '100%',\n  withoutControls: false,\n  wrapAround: false\n};\nexport { NextButton, PreviousButton, PagingDots };","map":null,"metadata":{},"sourceType":"module"}