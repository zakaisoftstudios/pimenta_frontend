{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Props = undefined;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _dec, _dec2, _class, _class2, _temp, _initialiseProps;\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _reactDom = require('react-dom');\nvar _reactDom2 = _interopRequireDefault(_reactDom);\nvar _moment = require('moment');\nvar _moment2 = _interopRequireDefault(_moment);\nvar _tcomb = require('tcomb');\nvar _tcomb2 = _interopRequireDefault(_tcomb);\nvar _tcombReact = require('tcomb-react');\nvar _omit = require('lodash/omit');\nvar _omit2 = _interopRequireDefault(_omit);\nvar _DatePicker = require('./DatePicker');\nvar _DatePicker2 = _interopRequireDefault(_DatePicker);\nvar _model = require('./utils/model');\nvar _utils = require('./utils');\nvar _classnames = require('classnames');\nvar _classnames2 = _interopRequireDefault(_classnames);\nvar _Input = require('./Input');\nvar _Input2 = _interopRequireDefault(_Input);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar INVALID = 'Invalid date';\nvar ENTER_KEYCODE = 13;\nvar Props = exports.Props = {\n  value: _tcomb2.default.maybe(_model.Value),\n  valueLink: _tcomb2.default.maybe(_tcomb2.default.interface({\n    value: _tcomb2.default.maybe(_model.Value),\n    requestChange: _tcomb2.default.Function\n  })),\n  onChange: _tcomb2.default.maybe(_tcomb2.default.Function),\n  onShow: _tcomb2.default.maybe(_tcomb2.default.Function),\n  onHide: _tcomb2.default.maybe(_tcomb2.default.Function),\n  onClear: _tcomb2.default.maybe(_tcomb2.default.Function),\n  small: _tcomb2.default.maybe(_tcomb2.default.Boolean),\n  defaultValue: _tcomb2.default.maybe(_model.Value),\n  minDate: _tcomb2.default.maybe(_model.Value),\n  maxDate: _tcomb2.default.maybe(_model.Value),\n  locale: _tcomb2.default.maybe(_tcomb2.default.String),\n  startMode: _tcomb2.default.maybe(_tcomb2.default.enums.of(['day', 'month', 'year'])),\n  startDate: _tcomb2.default.maybe(_model.Value),\n  fixedMode: _tcomb2.default.maybe(_tcomb2.default.Boolean),\n  displayFormat: _tcomb2.default.maybe(_tcomb2.default.String),\n  returnFormat: _tcomb2.default.maybe(_tcomb2.default.String),\n  format: _tcomb2.default.maybe(_tcomb2.default.String),\n  validationFormat: _tcomb2.default.maybe(_tcomb2.default.String),\n  showOnInputClick: _tcomb2.default.maybe(_tcomb2.default.Boolean),\n  closeOnClickOutside: _tcomb2.default.maybe(_tcomb2.default.Boolean),\n  showInputButton: _tcomb2.default.maybe(_tcomb2.default.Boolean),\n  autoClose: _tcomb2.default.maybe(_tcomb2.default.Boolean),\n  floating: _tcomb2.default.maybe(_tcomb2.default.Boolean),\n  disabled: _tcomb2.default.maybe(_tcomb2.default.Boolean),\n  position: _tcomb2.default.maybe(_tcomb2.default.enums.of(['top', 'bottom'])),\n  iconClassName: _tcomb2.default.maybe(_tcomb2.default.String),\n  iconClearClassName: _tcomb2.default.maybe(_tcomb2.default.String),\n  className: _tcomb2.default.maybe(_tcomb2.default.String),\n  // used to omit from inputProps\n  style: _tcomb2.default.maybe(_tcomb2.default.Object),\n  // used to omit from inputProps\n  placeholder: _tcomb2.default.maybe(_tcomb2.default.String)\n};\n\n/** A decent and pretty date picker to be used with React\n * @param value - current date\n * @param valueLink - valueLink object to replace \"value\" and \"onChange\"\n * @param onChange - called when value changes\n * @param onShow - called when datepicker is opened\n * @param onHide - called when datepicker is closed\n * @param onClear - called when value is cleared\n * @param small - whether it's small or not\n * @param defaultValue - default date\n * @param minDate - minimum date selectable by the user\n * @param maxDate - maximum date selectable by the user\n * @param locale - locale used for translations\n * @param startMode - the start view of the datepicker\n * @param startDate - specify an initial \"visible\" date with no need to select a defaultValue\n * @param fixedMode - whether the user can use multiple views or not\n * @param displayFormat - MomentJS format used to display current date\n * @param returnFormat - MomentJS format used to format date before returing through \"onChange\"\n * @param format - MomentJS format used to format date before returing through \"onChange\"\n * @param validationFormat - MomentJS format used to format date before returing through \"onChange\"\n * @param showOnInputClick - whether the datepicker should open when user click on the input\n * @param closeOnClickOutside - whether the datepicker should close when user clicks outside of it\n * @param showInputButton - whether the input-button should be rendered\n * @param autoClose - pass true if you want the datepicker to close automatically after the user selects a value\n * @param floating - whether the datepicker should float over the page content (absolute position)\n * @param position - whether the datepicker should be rendered above or below the input field\n * @param disabled - whether the datepicker should be disabled or not\n * @param iconClassName - classname used for the icon\n * @param iconClearClassName - classname used for the clear icon\n * @param className - className used for the wrapper div\n * @param style - style used for the wrapper div\n * @param placeholder\n */\n\nvar DatePickerInput = (_dec = (0, _utils.skinnable)(), _dec2 = (0, _tcombReact.props)(Props, {\n  strict: false\n}), (0, _utils.format)(_class = (0, _utils.valueLink)(_class = _dec(_class = _dec2(_class = (_temp = _class2 = function (_React$Component) {\n  _inherits(DatePickerInput, _React$Component);\n  function DatePickerInput(props) {\n    _classCallCheck(this, DatePickerInput);\n    var _this = _possibleConstructorReturn(this, (DatePickerInput.__proto__ || Object.getPrototypeOf(DatePickerInput)).call(this, props));\n    _initialiseProps.call(_this);\n    if (props.locale) {\n      _moment2.default.locale(props.locale);\n    }\n    var _date = _this.getValueLink().value || props.defaultValue;\n    var date = typeof _date === 'string' ? _this.parsePropDateString(_date) : (0, _moment2.default)(_date);\n    _this.state = {\n      date: _date ? date : undefined,\n      hasValue: !!_date,\n      dateString: _date ? _this.formatDisplayedDate(date) : '',\n      showing: false\n    };\n    return _this;\n  }\n  _createClass(DatePickerInput, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.closeOnClickOutside) {\n        this.addOnClickListener();\n      }\n    }\n  }, {\n    key: 'getLocals',\n    value: function getLocals(props) {\n      var showInputButton = props.showInputButton,\n        iconClassName = props.iconClassName,\n        showOnInputClick = props.showOnInputClick,\n        onClear = props.onClear,\n        small = props.small,\n        iconClearClassName = props.iconClearClassName,\n        defaultValue = props.defaultValue,\n        minDate = props.minDate,\n        maxDate = props.maxDate,\n        locale = props.locale,\n        startMode = props.startMode,\n        startDate = props.startDate,\n        fixedMode = props.fixedMode,\n        floating = props.floating,\n        closeOnClickOutside = props.closeOnClickOutside,\n        className = props.className,\n        disabled = props.disabled,\n        position = props.position,\n        placeholder = props.placeholder,\n        style = props.style;\n      var _state = this.state,\n        active = _state.showing,\n        hasValue = _state.hasValue,\n        value = _state.dateString,\n        date = _state.date;\n      var inputProps = (0, _omit2.default)(props, Object.keys(Props));\n      var onInputClick = showOnInputClick ? this.show : undefined;\n      var onButtonClick = showInputButton ? this.toggleDatePicker : undefined;\n      var onInputClear = onClear ? this.onClear : undefined;\n      return {\n        style: style,\n        className: (0, _classnames2.default)('react-datepicker-component', {\n          'is-disabled': disabled\n        }, className),\n        inputProps: _extends({\n          value: value,\n          small: small,\n          active: active,\n          hasValue: hasValue,\n          iconClassName: iconClassName,\n          iconClearClassName: iconClearClassName,\n          onInputClick: onInputClick,\n          onButtonClick: onButtonClick,\n          onInputClear: onInputClear,\n          onInputChange: this.onChangeInput,\n          onInputKeyUp: this.hideOnEnterKey,\n          placeholder: placeholder\n        }, inputProps),\n        datePickerProps: active && {\n          defaultValue: defaultValue,\n          minDate: minDate,\n          maxDate: maxDate,\n          locale: locale,\n          startMode: startMode,\n          startDate: startDate,\n          fixedMode: fixedMode,\n          floating: floating,\n          position: position,\n          closeOnClickOutside: closeOnClickOutside,\n          value: date ? date.toDate() : undefined,\n          onChange: this._onChangeDate\n        }\n      };\n    }\n  }, {\n    key: 'template',\n    value: function template(_ref) {\n      var _this2 = this;\n      var className = _ref.className,\n        style = _ref.style,\n        inputProps = _ref.inputProps,\n        datePickerProps = _ref.datePickerProps;\n      return _react2.default.createElement('div', _extends({\n        style: style,\n        className: className\n      }, {\n        ref: function ref(input) {\n          _this2.datePickerInputRef = input;\n        }\n      }), _react2.default.createElement(_Input2.default, inputProps), datePickerProps && _react2.default.createElement(_DatePicker2.default, datePickerProps));\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _getValueLink = this.getValueLink(nextProps),\n        value = _getValueLink.value;\n\n      // Update `date` and `dateString` if `props.value` has changed\n\n      if (value !== INVALID && value !== this.getValueLink().value) {\n        if (value) {\n          var date = typeof value === 'string' ? this.parsePropDateString(value, nextProps) : (0, _moment2.default)(value);\n          this.setState({\n            date: date,\n            dateString: date.isValid() ? this.formatDisplayedDate(date, nextProps) : this.state.dateString\n          });\n        } else {\n          this.setState({\n            date: undefined,\n            dateString: ''\n          });\n        }\n      }\n\n      // Close datepicker if `disabled` has switched to `true`\n      if (nextProps.disabled && !this.props.disabled) {\n        this.hide();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.props.closeOnClickOutside) {\n        this.removeOnClickListener();\n      }\n    }\n  }]);\n  return DatePickerInput;\n}(_react2.default.Component), _class2.defaultProps = {\n  onShow: function onShow() {},\n  onHide: function onHide() {},\n  startMode: 'day',\n  autoClose: true,\n  closeOnClickOutside: true,\n  floating: true,\n  small: false,\n  showInputButton: true,\n  position: 'bottom',\n  iconClassName: 'icon-rc-datepicker icon-rc-datepicker_calendar',\n  iconClearClassName: 'icon-rc-datepicker icon-rc-datepicker_clear',\n  className: '',\n  style: {}\n}, _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n  this.datePickerInputRef = null;\n  this.addOnClickListener = function () {\n    if (window.attachEvent) {\n      // Internet Explorer\n      window.attachEvent('onclick', _this3.hideOnClickOutside);\n    } else if (window.addEventListener) {\n      window.addEventListener('click', _this3.hideOnClickOutside, false);\n    }\n  };\n  this.removeOnClickListener = function () {\n    if (window.detachEvent) {\n      // Internet Explorer\n      window.detachEvent('onclick', _this3.hideOnClickOutside);\n    } else if (window.removeEventListener) {\n      window.removeEventListener('click', _this3.hideOnClickOutside, false);\n    }\n  };\n  this.getDatePickerInput = function () {\n    return _reactDom2.default.findDOMNode(_this3.datePickerInputRef);\n  };\n  this.isEventInsideDatePickerInput = function (el) {\n    if (el === _this3.getDatePickerInput()) {\n      return true;\n    } else if (el.parentNode) {\n      return _this3.isEventInsideDatePickerInput(el.parentNode);\n    } else {\n      return false;\n    }\n  };\n  this.hideOnClickOutside = function (e) {\n    if (!_this3.isEventInsideDatePickerInput(e.target) && _this3.state.showing) {\n      _this3.hide();\n    }\n  };\n  this.hide = function () {\n    _this3.setState({\n      showing: false\n    }, _this3.props.onHide);\n  };\n  this.show = function () {\n    if (!_this3.state.showing) {\n      _this3.setState({\n        showing: true\n      }, _this3.props.onShow);\n    }\n  };\n  this.toggleDatePicker = function () {\n    var callback = _this3.state.showing ? _this3.props.onHide : _this3.props.onShow;\n    _this3.setState({\n      showing: !_this3.state.showing\n    }, callback);\n  };\n  this.hideOnEnterKey = function (e) {\n    if (e.keyCode === ENTER_KEYCODE) {\n      _this3.hide();\n    }\n  };\n  this.onClear = function () {\n    var _date = _this3.props.defaultValue;\n    var date = typeof _date === 'string' ? _this3.parsePropDateString(_date) : (0, _moment2.default)(_date);\n    _this3.setState({\n      date: _date ? date : undefined,\n      dateString: _date ? _this3.formatDisplayedDate(date) : '',\n      showing: false\n    }, _this3.props.onClear);\n  };\n  this._onChangeDate = function (jsDate) {\n    var newDate = (0, _moment2.default)(jsDate);\n    var newDateString = _this3.formatDisplayedDate(newDate);\n    if (_this3.props.autoClose) {\n      _this3.hide();\n    }\n    _this3.getValueLink().requestChange(jsDate, _this3.formatReturnedDate(newDate));\n    if (newDateString !== _this3.state.dateString) {\n      _this3.setState({\n        hasValue: true,\n        date: newDate,\n        dateString: newDateString\n      });\n    }\n  };\n  this.onChangeInput = function (_ref2) {\n    var dateString = _ref2.target.value;\n    if (dateString || _this3.state.date) {\n      var parsedDate = _this3.parseInputDateString(dateString);\n      var date = parsedDate.isValid() ? parsedDate : _this3.state.date;\n      var jsDate = parsedDate.isValid() ? parsedDate.toDate() : INVALID;\n      var returnedDateString = jsDate ? _this3.formatReturnedDate(parsedDate) : INVALID;\n      _this3.setState({\n        dateString: dateString,\n        date: date,\n        hasValue: parsedDate.isValid()\n      }, function () {\n        return _this3.getValueLink().requestChange(jsDate, returnedDateString);\n      });\n    } else if (!dateString) {\n      _this3.setState({\n        dateString: dateString\n      });\n    }\n  };\n}, _temp)) || _class) || _class) || _class) || _class);\nexports.default = DatePickerInput;","map":null,"metadata":{},"sourceType":"script"}