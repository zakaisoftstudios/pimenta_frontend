{"ast":null,"code":"var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar forbidNewOperator = require('./forbidNewOperator');\nvar isIdentity = require('./isIdentity');\nvar create = require('./create');\nvar is = require('./is');\nvar getTypeName = require('./getTypeName');\nvar getFunctionName = require('./getFunctionName');\nfunction getDefaultName(type, predicate) {\n  return '{' + getTypeName(type) + ' | ' + getFunctionName(predicate) + '}';\n}\nfunction refinement(type, predicate, name) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(type), function () {\n      return 'Invalid argument type ' + assert.stringify(type) + ' supplied to refinement(type, predicate, [name]) combinator (expected a type)';\n    });\n    assert(isFunction(predicate), function () {\n      return 'Invalid argument predicate supplied to refinement(type, predicate, [name]) combinator (expected a function)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to refinement(type, predicate, [name]) combinator (expected a string)';\n    });\n  }\n  var displayName = name || getDefaultName(type, predicate);\n  var identity = isIdentity(type);\n  function Refinement(value, path) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (identity) {\n        forbidNewOperator(this, Refinement);\n      }\n      path = path || [displayName];\n    }\n    var x = create(type, value, path);\n    if (process.env.NODE_ENV !== 'production') {\n      assert(predicate(x), function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');\n      });\n    }\n    return x;\n  }\n  Refinement.meta = {\n    kind: 'subtype',\n    type: type,\n    predicate: predicate,\n    name: name,\n    identity: identity\n  };\n  Refinement.displayName = displayName;\n  Refinement.is = function (x) {\n    return is(x, type) && predicate(x);\n  };\n  Refinement.update = function (instance, patch) {\n    return Refinement(assert.update(instance, patch));\n  };\n  return Refinement;\n}\nrefinement.getDefaultName = getDefaultName;\nmodule.exports = refinement;","map":null,"metadata":{},"sourceType":"script"}