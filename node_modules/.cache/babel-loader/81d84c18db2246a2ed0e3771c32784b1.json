{"ast":null,"code":"'use strict';\n\nfunction pad(hash, len) {\n  while (hash.length < len) {\n    hash = '0' + hash;\n  }\n  return hash;\n}\nfunction fold(hash, text) {\n  var i;\n  var chr;\n  var len;\n  if (text.length === 0) {\n    return hash;\n  }\n  for (i = 0, len = text.length; i < len; i++) {\n    chr = text.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0;\n  }\n  return hash < 0 ? hash * -2 : hash;\n}\nfunction foldObject(hash, o, seen) {\n  return Object.keys(o).sort().reduce(foldKey, hash);\n  function foldKey(hash, key) {\n    return foldValue(hash, o[key], key, seen);\n  }\n}\nfunction foldValue(input, value, key, seen) {\n  var hash = fold(fold(fold(input, key), toString(value)), typeof value);\n  if (value === null) {\n    return fold(hash, 'null');\n  }\n  if (value === undefined) {\n    return fold(hash, 'undefined');\n  }\n  if (typeof value === 'object') {\n    if (seen.indexOf(value) !== -1) {\n      return fold(hash, '[Circular]' + key);\n    }\n    seen.push(value);\n    return foldObject(hash, value, seen);\n  }\n  return fold(hash, value.toString());\n}\nfunction toString(o) {\n  return Object.prototype.toString.call(o);\n}\nfunction sum(o) {\n  return pad(foldValue(0, o, '', []).toString(16), 8);\n}\nmodule.exports = sum;","map":null,"metadata":{},"sourceType":"script"}