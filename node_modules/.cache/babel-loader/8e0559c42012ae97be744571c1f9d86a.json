{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _propertyExpr = require(\"property-expr\");\nvar validateName = function validateName(d) {\n  if (typeof d !== 'string') throw new TypeError(\"ref's must be strings, got: \" + d);\n};\nvar Reference = /*#__PURE__*/\nfunction () {\n  Reference.isRef = function isRef(value) {\n    return !!(value && (value.__isYupRef || value instanceof Reference));\n  };\n  var _proto = Reference.prototype;\n  _proto.toString = function toString() {\n    return \"Ref(\" + this.key + \")\";\n  };\n  function Reference(key, mapFn, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateName(key);\n    var prefix = options.contextPrefix || '$';\n    if (typeof key === 'function') {\n      key = '.';\n    }\n    this.key = key.trim();\n    this.prefix = prefix;\n    this.isContext = this.key.indexOf(prefix) === 0;\n    this.isSelf = this.key === '.';\n    this.path = this.isContext ? this.key.slice(this.prefix.length) : this.key;\n    this._get = (0, _propertyExpr.getter)(this.path, true);\n    this.map = mapFn || function (value) {\n      return value;\n    };\n  }\n  _proto.resolve = function resolve() {\n    return this;\n  };\n  _proto.cast = function cast(value, _ref) {\n    var parent = _ref.parent,\n      context = _ref.context;\n    return this.getValue(parent, context);\n  };\n  _proto.getValue = function getValue(parent, context) {\n    var isContext = this.isContext;\n    var value = this._get(isContext ? context : parent || context || {});\n    return this.map(value);\n  };\n  return Reference;\n}();\nexports.default = Reference;\nReference.prototype.__isYupRef = true;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}