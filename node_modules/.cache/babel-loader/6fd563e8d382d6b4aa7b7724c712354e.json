{"ast":null,"code":"var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar getTypeName = require('./getTypeName');\nvar isIdentity = require('./isIdentity');\nvar create = require('./create');\nvar is = require('./is');\nvar isArray = require('./isArray');\nfunction getDefaultName(type) {\n  return 'Array<' + getTypeName(type) + '>';\n}\nfunction list(type, name) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isFunction(type), function () {\n      return 'Invalid argument type ' + assert.stringify(type) + ' supplied to list(type, [name]) combinator (expected a type)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to list(type, [name]) combinator (expected a string)';\n    });\n  }\n  var displayName = name || getDefaultName(type);\n  var typeNameCache = getTypeName(type);\n  var identity = isIdentity(type); // the list is identity iif type is identity\n\n  function List(value, path) {\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value; // just trust the input if elements must not be hydrated\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isArray(value), function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an array of ' + typeNameCache + ')';\n      });\n    }\n    var idempotent = true; // will remain true if I can reutilise the input\n    var ret = []; // make a temporary copy, will be discarded if idempotent remains true\n    for (var i = 0, len = value.length; i < len; i++) {\n      var actual = value[i];\n      var instance = create(type, actual, process.env.NODE_ENV !== 'production' ? path.concat(i + ': ' + typeNameCache) : null);\n      idempotent = idempotent && actual === instance;\n      ret.push(instance);\n    }\n    if (idempotent) {\n      // implements idempotency\n      ret = value;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(ret);\n    }\n    return ret;\n  }\n  List.meta = {\n    kind: 'list',\n    type: type,\n    name: name,\n    identity: identity\n  };\n  List.displayName = displayName;\n  List.is = function (x) {\n    return isArray(x) && x.every(function (e) {\n      return is(e, type);\n    });\n  };\n  List.update = function (instance, patch) {\n    return List(assert.update(instance, patch));\n  };\n  return List;\n}\nlist.getDefaultName = getDefaultName;\nmodule.exports = list;","map":null,"metadata":{},"sourceType":"script"}