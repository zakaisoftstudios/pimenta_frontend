{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getSlideHeight } from '../utilities/style-utilities';\nimport { handleSelfFocus } from '../utilities/utilities';\nvar MIN_ZOOM_SCALE = 0;\nvar MAX_ZOOM_SCALE = 1;\nvar ScrollTransition3D = /*#__PURE__*/function (_React$Component) {\n  _inherits(ScrollTransition3D, _React$Component);\n  var _super = _createSuper(ScrollTransition3D);\n  function ScrollTransition3D(props) {\n    var _this;\n    _classCallCheck(this, ScrollTransition3D);\n    _this = _super.call(this, props);\n    _this.getListStyles = _this.getListStyles.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /* eslint-disable complexity */\n\n  _createClass(ScrollTransition3D, [{\n    key: \"getSlideTargetPosition\",\n    value: function getSlideTargetPosition(index) {\n      var targetPosition = 0;\n      var offset = 0;\n      if (index !== this.props.currentSlide) {\n        var relativeDistanceToCurrentSlide = this.getRelativeDistanceToCurrentSlide(index);\n        targetPosition = (this.props.slideWidth + this.props.cellSpacing) * relativeDistanceToCurrentSlide - this.getZoomOffsetFor(relativeDistanceToCurrentSlide);\n        offset = 0;\n        if (this.props.animation === 'zoom' && (this.props.currentSlide === index + 1 || this.props.currentSlide === 0 && index === this.props.children.length - 1)) {\n          offset = this.props.slideOffset;\n        } else if (this.props.animation === 'zoom' && (this.props.currentSlide === index - 1 || this.props.currentSlide === this.props.children.length - 1 && index === 0)) {\n          offset = -this.props.slideOffset;\n        }\n      }\n      return targetPosition + offset;\n    }\n    /* eslint-enable complexity */\n  }, {\n    key: \"formatChildren\",\n    value: function formatChildren(children) {\n      var _this2 = this;\n      var _this$props = this.props,\n        top = _this$props.top,\n        left = _this$props.left,\n        currentSlide = _this$props.currentSlide,\n        slidesToShow = _this$props.slidesToShow,\n        vertical = _this$props.vertical;\n      var positionValue = vertical ? top : left;\n      return React.Children.map(children, function (child, index) {\n        var visible = _this2.getDistanceToCurrentSlide(index) <= slidesToShow / 2;\n        var current = currentSlide === index;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"slider-slide\".concat(visible ? ' slide-visible' : '').concat(current ? ' slide-current' : ''),\n          style: _this2.getSlideStyles(index, positionValue),\n          key: index,\n          \"aria-label\": \"slide \".concat(index + 1, \" of \").concat(children.length),\n          role: \"group\",\n          onClick: handleSelfFocus,\n          tabIndex: -1\n        }, child);\n      });\n    }\n  }, {\n    key: \"getZoomOffsetFor\",\n    value: function getZoomOffsetFor(relativeDistanceToCurrent) {\n      if (relativeDistanceToCurrent === 0) {\n        return 0;\n      }\n      var marginGeneratedByZoom = (1 - Math.pow(this.props.zoomScale, Math.abs(relativeDistanceToCurrent))) * this.props.slideWidth;\n      var direction = relativeDistanceToCurrent < 0 ? -1 : 1;\n      var result = marginGeneratedByZoom * direction + this.getZoomOffsetFor(relativeDistanceToCurrent < 0 ? relativeDistanceToCurrent + 1 : relativeDistanceToCurrent - 1);\n      return result;\n    }\n  }, {\n    key: \"getDistance\",\n    value: function getDistance(index, referenceIndex) {\n      return Math.abs(index - referenceIndex);\n    }\n  }, {\n    key: \"getDistanceToCurrentSlide\",\n    value: function getDistanceToCurrentSlide(index) {\n      var _this$props2 = this.props,\n        wrapAround = _this$props2.wrapAround,\n        currentSlide = _this$props2.currentSlide,\n        slideCount = _this$props2.slideCount;\n      return wrapAround ? Math.min(Math.min(this.getDistance(index, 0) + this.getDistance(currentSlide, slideCount), this.getDistance(index, slideCount) + this.getDistance(currentSlide, 0)), this.getDistance(index, currentSlide)) : this.getDistance(index, currentSlide);\n    }\n  }, {\n    key: \"getRelativeDistanceToCurrentSlide\",\n    value: function getRelativeDistanceToCurrentSlide(index) {\n      var _this$props3 = this.props,\n        wrapAround = _this$props3.wrapAround,\n        currentSlide = _this$props3.currentSlide,\n        slideCount = _this$props3.slideCount;\n      if (wrapAround) {\n        var distanceByLeftEge = this.getDistance(index, 0) + this.getDistance(currentSlide, slideCount);\n        var distanceByRightEdge = this.getDistance(index, slideCount) + this.getDistance(currentSlide, 0);\n        var absoluteDirectDistance = this.getDistance(index, currentSlide);\n        var minimumDistance = Math.min(Math.min(distanceByLeftEge, distanceByRightEdge), absoluteDirectDistance);\n        switch (minimumDistance) {\n          case absoluteDirectDistance:\n            return index - currentSlide;\n          case distanceByLeftEge:\n            return distanceByLeftEge;\n          case distanceByRightEdge:\n            return -distanceByRightEdge;\n          default:\n            return 0;\n        }\n      } else {\n        return index - currentSlide;\n      }\n    }\n  }, {\n    key: \"getTransformScale\",\n    value: function getTransformScale(index) {\n      return this.props.currentSlide !== index ? Math.max(Math.min(Math.pow(this.props.zoomScale, this.getDistanceToCurrentSlide(index)), MAX_ZOOM_SCALE), MIN_ZOOM_SCALE) : 1.0;\n    }\n  }, {\n    key: \"getOpacityScale\",\n    value: function getOpacityScale(index) {\n      return this.props.currentSlide !== index ? Math.max(Math.min(Math.pow(this.props.opacityScale, this.getDistanceToCurrentSlide(index)), MAX_ZOOM_SCALE), MIN_ZOOM_SCALE) : 1.0;\n    }\n  }, {\n    key: \"getSlideStyles\",\n    value: function getSlideStyles(index, positionValue) {\n      var _this$props4 = this.props,\n        vertical = _this$props4.vertical,\n        slideCount = _this$props4.slideCount,\n        cellSpacing = _this$props4.cellSpacing,\n        slideWidth = _this$props4.slideWidth;\n      var targetPosition = this.getSlideTargetPosition(index, positionValue);\n      var transformScale = this.getTransformScale(index);\n      return {\n        boxSizing: 'border-box',\n        display: vertical ? 'block' : 'inline-block',\n        height: getSlideHeight(this.props),\n        left: vertical ? 0 : targetPosition,\n        listStyleType: 'none',\n        marginBottom: vertical ? cellSpacing / 2 : 'auto',\n        marginLeft: vertical ? 'auto' : cellSpacing / 2,\n        marginRight: vertical ? 'auto' : cellSpacing / 2,\n        marginTop: vertical ? cellSpacing / 2 : 'auto',\n        MozBoxSizing: 'border-box',\n        opacity: this.getOpacityScale(index),\n        position: 'absolute',\n        top: vertical ? targetPosition : 0,\n        transform: \"scale(\".concat(transformScale, \")\"),\n        transition: 'left 0.4s ease-out, transform 0.4s ease-out, opacity 0.4s ease-out',\n        verticalAlign: 'top',\n        width: vertical ? '100%' : slideWidth,\n        zIndex: slideCount - this.getDistanceToCurrentSlide(index)\n      };\n    }\n  }, {\n    key: \"getListStyles\",\n    value: function getListStyles() {\n      var listWidth = this.props.slideWidth * React.Children.count(this.props.children);\n      var spacingOffset = this.props.cellSpacing * React.Children.count(this.props.children);\n      return {\n        boxSizing: 'border-box',\n        cursor: this.props.dragging === true ? 'pointer' : 'inherit',\n        height: this.props.vertical ? listWidth + spacingOffset : this.props.slideHeight,\n        left: \"calc(50% - (\".concat(this.props.slideWidth, \"px / 2))\"),\n        margin: this.props.vertical ? \"\".concat(this.props.cellSpacing / 2 * -1, \"px 0px\") : \"\".concat(this.props.slideListMargin, \"px \").concat(this.props.cellSpacing / 2 * -1, \"px\"),\n        MozBoxSizing: 'border-box',\n        padding: 0,\n        position: 'relative',\n        touchAction: \"pinch-zoom \".concat(this.props.vertical ? 'pan-x' : 'pan-y'),\n        width: this.props.vertical ? 'auto' : '100%'\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.formatChildren(this.props.children);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"slider-list\",\n        style: this.getListStyles()\n      }, children);\n    }\n  }]);\n  return ScrollTransition3D;\n}(React.Component);\nexport { ScrollTransition3D as default };\nScrollTransition3D.propTypes = {\n  cellSpacing: PropTypes.number,\n  currentSlide: PropTypes.number,\n  dragging: PropTypes.bool,\n  heightMode: PropTypes.oneOf(['first', 'current', 'max']),\n  isWrappingAround: PropTypes.bool,\n  left: PropTypes.number,\n  opacityScale: PropTypes.number,\n  slideCount: PropTypes.number,\n  slideHeight: PropTypes.number,\n  slideListMargin: PropTypes.number,\n  slideOffset: PropTypes.number,\n  slidesToShow: PropTypes.number,\n  slideWidth: PropTypes.number,\n  top: PropTypes.number,\n  vertical: PropTypes.bool,\n  wrapAround: PropTypes.bool,\n  zoomScale: PropTypes.number\n};\nScrollTransition3D.defaultProps = {\n  cellSpacing: 0,\n  currentSlide: 0,\n  dragging: false,\n  heightMode: 'max',\n  isWrappingAround: false,\n  left: 0,\n  opacityScale: 0.65,\n  slideCount: 0,\n  slideHeight: 0,\n  slideListMargin: 0,\n  slidesToShow: 3,\n  slideWidth: 0,\n  top: 0,\n  vertical: false,\n  wrapAround: true,\n  zoomScale: 0.75\n};","map":null,"metadata":{},"sourceType":"module"}