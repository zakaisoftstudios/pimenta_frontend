{"ast":null,"code":"var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isType = require('./isType');\nvar isNil = require('./isNil');\nvar mixin = require('./mixin');\nvar getTypeName = require('./getTypeName');\nvar isUnion = require('./isUnion');\n\n// All the .declare-d types should be clearly different from each other thus they should have\n// different names when a name was not explicitly provided.\nvar nextDeclareUniqueId = 1;\nmodule.exports = function declare(name) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + name + ' supplied to declare([name]) (expected a string)';\n    });\n  }\n  var type;\n  function Declare(value, path) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(!isNil(type), function () {\n        return 'Type declared but not defined, don\\'t forget to call .define on every declared type';\n      });\n      if (isUnion(type)) {\n        assert(type.dispatch === Declare.dispatch, function () {\n          return 'Please define the custom ' + name + '.dispatch function before calling ' + name + '.define()';\n        });\n      }\n    }\n    return type(value, path);\n  }\n  Declare.define = function (spec) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(isType(spec), function () {\n        return 'Invalid argument type ' + assert.stringify(spec) + ' supplied to define(type) (expected a type)';\n      });\n      assert(isNil(type), function () {\n        return 'Declare.define(type) can only be invoked once';\n      });\n      // assert(isNil(spec.meta.name) && Object.keys(spec.prototype).length === 0, function () { return 'Invalid argument type ' + assert.stringify(spec) + ' supplied to define(type) (expected a fresh, unnamed type)'; });\n    }\n\n    if (isUnion(spec) && Declare.hasOwnProperty('dispatch')) {\n      spec.dispatch = Declare.dispatch;\n    }\n    type = spec;\n    mixin(Declare, type, true); // true because it overwrites Declare.displayName\n    if (name) {\n      type.displayName = Declare.displayName = name;\n      Declare.meta.name = name;\n    }\n    Declare.meta.identity = type.meta.identity;\n    Declare.prototype = type.prototype;\n    return Declare;\n  };\n  Declare.displayName = name || getTypeName(Declare) + \"$\" + nextDeclareUniqueId++;\n  // in general I can't say if this type will be an identity, for safety setting to false\n  Declare.meta = {\n    identity: false\n  };\n  Declare.prototype = null;\n  return Declare;\n};","map":null,"metadata":{},"sourceType":"script"}