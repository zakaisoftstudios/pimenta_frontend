{"ast":null,"code":"var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar FunctionType = require('./Function');\nvar isArray = require('./isArray');\nvar list = require('./list');\nvar isObject = require('./isObject');\nvar create = require('./create');\nvar isNil = require('./isNil');\nvar isBoolean = require('./isBoolean');\nvar tuple = require('./tuple');\nvar getFunctionName = require('./getFunctionName');\nvar getTypeName = require('./getTypeName');\nvar isType = require('./isType');\nfunction getDefaultName(domain, codomain) {\n  return '(' + domain.map(getTypeName).join(', ') + ') => ' + getTypeName(codomain);\n}\nfunction isInstrumented(f) {\n  return FunctionType.is(f) && isObject(f.instrumentation);\n}\nfunction getOptionalArgumentsIndex(types) {\n  var end = types.length;\n  var areAllMaybes = false;\n  for (var i = end - 1; i >= 0; i--) {\n    var type = types[i];\n    if (!isType(type) || type.meta.kind !== 'maybe') {\n      return i + 1;\n    } else {\n      areAllMaybes = true;\n    }\n  }\n  return areAllMaybes ? 0 : end;\n}\nfunction func(domain, codomain, name) {\n  domain = isArray(domain) ? domain : [domain]; // handle handy syntax for unary functions\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(list(FunctionType).is(domain), function () {\n      return 'Invalid argument domain ' + assert.stringify(domain) + ' supplied to func(domain, codomain, [name]) combinator (expected an array of types)';\n    });\n    assert(FunctionType.is(codomain), function () {\n      return 'Invalid argument codomain ' + assert.stringify(codomain) + ' supplied to func(domain, codomain, [name]) combinator (expected a type)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to func(domain, codomain, [name]) combinator (expected a string)';\n    });\n  }\n  var displayName = name || getDefaultName(domain, codomain);\n  var domainLength = domain.length;\n  var optionalArgumentsIndex = getOptionalArgumentsIndex(domain);\n  function FuncType(value, path) {\n    if (!isInstrumented(value)) {\n      // automatically instrument the function\n      return FuncType.of(value);\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(FuncType.is(value), function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');\n      });\n    }\n    return value;\n  }\n  FuncType.meta = {\n    kind: 'func',\n    domain: domain,\n    codomain: codomain,\n    name: name,\n    identity: true\n  };\n  FuncType.displayName = displayName;\n  FuncType.is = function (x) {\n    return isInstrumented(x) && x.instrumentation.domain.length === domainLength && x.instrumentation.domain.every(function (type, i) {\n      return type === domain[i];\n    }) && x.instrumentation.codomain === codomain;\n  };\n  FuncType.of = function (f, curried) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(FunctionType.is(f), function () {\n        return 'Invalid argument f supplied to func.of ' + displayName + ' (expected a function)';\n      });\n      assert(isNil(curried) || isBoolean(curried), function () {\n        return 'Invalid argument curried ' + assert.stringify(curried) + ' supplied to func.of ' + displayName + ' (expected a boolean)';\n      });\n    }\n    if (FuncType.is(f)) {\n      // makes FuncType.of idempotent\n      return f;\n    }\n    function fn() {\n      var args = Array.prototype.slice.call(arguments);\n      var argsLength = args.length;\n      if (process.env.NODE_ENV !== 'production') {\n        // type-check arguments\n        var tupleLength = curried ? argsLength : Math.max(argsLength, optionalArgumentsIndex);\n        tuple(domain.slice(0, tupleLength), 'arguments of function ' + displayName)(args);\n      }\n      if (curried && argsLength < domainLength) {\n        if (process.env.NODE_ENV !== 'production') {\n          assert(argsLength > 0, 'Invalid arguments.length = 0 for curried function ' + displayName);\n        }\n        var g = Function.prototype.bind.apply(f, [this].concat(args));\n        var newDomain = func(domain.slice(argsLength), codomain);\n        return newDomain.of(g, true);\n      } else {\n        return create(codomain, f.apply(this, args));\n      }\n    }\n    fn.instrumentation = {\n      domain: domain,\n      codomain: codomain,\n      f: f\n    };\n    fn.displayName = getFunctionName(f);\n    return fn;\n  };\n  return FuncType;\n}\nfunc.getDefaultName = getDefaultName;\nfunc.getOptionalArgumentsIndex = getOptionalArgumentsIndex;\nmodule.exports = func;","map":null,"metadata":{},"sourceType":"script"}