{"ast":null,"code":"/**\n * Based on Kendo UI Core expression code <https://github.com/telerik/kendo-ui-core#license-information>\n */\n'use strict';\n\nfunction Cache(maxSize) {\n  this._maxSize = maxSize;\n  this.clear();\n}\nCache.prototype.clear = function () {\n  this._size = 0;\n  this._values = {};\n};\nCache.prototype.get = function (key) {\n  return this._values[key];\n};\nCache.prototype.set = function (key, value) {\n  this._size >= this._maxSize && this.clear();\n  if (!this._values.hasOwnProperty(key)) {\n    this._size++;\n  }\n  return this._values[key] = value;\n};\nvar SPLIT_REGEX = /[^.^\\]^[]+|(?=\\[\\]|\\.\\.)/g,\n  DIGIT_REGEX = /^\\d+$/,\n  LEAD_DIGIT_REGEX = /^\\d/,\n  SPEC_CHAR_REGEX = /[~`!#$%\\^&*+=\\-\\[\\]\\\\';,/{}|\\\\\":<>\\?]/g,\n  CLEAN_QUOTES_REGEX = /^\\s*(['\"]?)(.*?)(\\1)\\s*$/,\n  MAX_CACHE_SIZE = 512;\nvar contentSecurityPolicy = false,\n  pathCache = new Cache(MAX_CACHE_SIZE),\n  setCache = new Cache(MAX_CACHE_SIZE),\n  getCache = new Cache(MAX_CACHE_SIZE);\ntry {\n  new Function('');\n} catch (error) {\n  contentSecurityPolicy = true;\n}\nmodule.exports = {\n  Cache: Cache,\n  expr: expr,\n  split: split,\n  normalizePath: normalizePath,\n  setter: contentSecurityPolicy ? function (path) {\n    var parts = normalizePath(path);\n    return function (data, value) {\n      return setterFallback(parts, data, value);\n    };\n  } : function (path) {\n    return setCache.get(path) || setCache.set(path, new Function('data, value', expr(path, 'data') + ' = value'));\n  },\n  getter: contentSecurityPolicy ? function (path, safe) {\n    var parts = normalizePath(path);\n    return function (data) {\n      return getterFallback(parts, safe, data);\n    };\n  } : function (path, safe) {\n    var key = path + '_' + safe;\n    return getCache.get(key) || getCache.set(key, new Function('data', 'return ' + expr(path, safe, 'data')));\n  },\n  join: function join(segments) {\n    return segments.reduce(function (path, part) {\n      return path + (isQuoted(part) || DIGIT_REGEX.test(part) ? '[' + part + ']' : (path ? '.' : '') + part);\n    }, '');\n  },\n  forEach: function forEach(path, cb, thisArg) {\n    _forEach(split(path), cb, thisArg);\n  }\n};\nfunction setterFallback(parts, data, value) {\n  var index = 0,\n    len = parts.length;\n  while (index < len - 1) {\n    data = data[parts[index++]];\n  }\n  data[parts[index]] = value;\n}\nfunction getterFallback(parts, safe, data) {\n  var index = 0,\n    len = parts.length;\n  while (index < len) {\n    if (data != null || !safe) {\n      data = data[parts[index++]];\n    } else {\n      return;\n    }\n  }\n  return data;\n}\nfunction normalizePath(path) {\n  return pathCache.get(path) || pathCache.set(path, split(path).map(function (part) {\n    return part.replace(CLEAN_QUOTES_REGEX, '$2');\n  }));\n}\nfunction split(path) {\n  return path.match(SPLIT_REGEX);\n}\nfunction expr(expression, safe, param) {\n  expression = expression || '';\n  if (typeof safe === 'string') {\n    param = safe;\n    safe = false;\n  }\n  param = param || 'data';\n  if (expression && expression.charAt(0) !== '[') expression = '.' + expression;\n  return safe ? makeSafe(expression, param) : param + expression;\n}\nfunction _forEach(parts, iter, thisArg) {\n  var len = parts.length,\n    part,\n    idx,\n    isArray,\n    isBracket;\n  for (idx = 0; idx < len; idx++) {\n    part = parts[idx];\n    if (part) {\n      if (shouldBeQuoted(part)) {\n        part = '\"' + part + '\"';\n      }\n      isBracket = isQuoted(part);\n      isArray = !isBracket && /^\\d+$/.test(part);\n      iter.call(thisArg, part, isBracket, isArray, idx, parts);\n    }\n  }\n}\nfunction isQuoted(str) {\n  return typeof str === 'string' && str && [\"'\", '\"'].indexOf(str.charAt(0)) !== -1;\n}\nfunction makeSafe(path, param) {\n  var result = param,\n    parts = split(path),\n    isLast;\n  _forEach(parts, function (part, isBracket, isArray, idx, parts) {\n    isLast = idx === parts.length - 1;\n    part = isBracket || isArray ? '[' + part + ']' : '.' + part;\n    result += part + (!isLast ? ' || {})' : ')');\n  });\n  return new Array(parts.length + 1).join('(') + result;\n}\nfunction hasLeadingNumber(part) {\n  return part.match(LEAD_DIGIT_REGEX) && !part.match(DIGIT_REGEX);\n}\nfunction hasSpecialChars(part) {\n  return SPEC_CHAR_REGEX.test(part);\n}\nfunction shouldBeQuoted(part) {\n  return !isQuoted(part) && (hasLeadingNumber(part) || hasSpecialChars(part));\n}","map":null,"metadata":{},"sourceType":"script"}