{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nexport var mix = function mix(one, two, mergeArrays) {\n  if (mergeArrays === void 0) {\n    mergeArrays = false;\n  }\n  if (!one || !two || typeof one !== \"object\" || typeof two !== \"object\") return one;\n  var clone = __assign({}, one);\n  for (var prop in two) {\n    if (two.hasOwnProperty(prop)) {\n      if (two[prop] instanceof Array && one[prop] instanceof Array) {\n        clone[prop] = mergeArrays ? __spreadArray(__spreadArray([], one[prop], true), two[prop], true) : two[prop];\n      } else if (typeof two[prop] === \"object\" && typeof one[prop] === \"object\") {\n        clone[prop] = mix(one[prop], two[prop], mergeArrays);\n      } else {\n        clone[prop] = two[prop];\n      }\n    }\n  }\n  return clone;\n};","map":null,"metadata":{},"sourceType":"module"}