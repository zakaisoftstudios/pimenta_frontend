{"ast":null,"code":"var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar getTypeName = require('./getTypeName');\nvar isIdentity = require('./isIdentity');\nvar isArray = require('./isArray');\nvar create = require('./create');\nvar is = require('./is');\nvar forbidNewOperator = require('./forbidNewOperator');\nvar isUnion = require('./isUnion');\nvar isNil = require('./isNil');\nfunction getDefaultName(types) {\n  return types.map(getTypeName).join(' | ');\n}\nfunction union(types, name) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(types) && types.every(isFunction) && types.length >= 2, function () {\n      return 'Invalid argument types ' + assert.stringify(types) + ' supplied to union(types, [name]) combinator (expected an array of at least 2 types)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to union(types, [name]) combinator (expected a string)';\n    });\n  }\n  var displayName = name || getDefaultName(types);\n  var identity = types.every(isIdentity);\n  function Union(value, path) {\n    if (process.env.NODE_ENV === 'production') {\n      if (identity) {\n        return value;\n      }\n    }\n    var type = Union.dispatch(value);\n    if (!type && Union.is(value)) {\n      return value;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (identity) {\n        forbidNewOperator(this, Union);\n      }\n      path = path || [displayName];\n      assert(isFunction(type), function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (no constructor returned by dispatch)';\n      });\n      path[path.length - 1] += '(' + getTypeName(type) + ')';\n    }\n    return create(type, value, path);\n  }\n  Union.meta = {\n    kind: 'union',\n    types: types,\n    name: name,\n    identity: identity\n  };\n  Union.displayName = displayName;\n  Union.is = function (x) {\n    return types.some(function (type) {\n      return is(x, type);\n    });\n  };\n  Union.dispatch = function (x) {\n    // default dispatch implementation\n    for (var i = 0, len = types.length; i < len; i++) {\n      var type = types[i];\n      if (isUnion(type)) {\n        // handle union of unions\n        var t = type.dispatch(x);\n        if (!isNil(t)) {\n          return t;\n        }\n      } else if (is(x, type)) {\n        return type;\n      }\n    }\n  };\n  Union.update = function (instance, patch) {\n    return Union(assert.update(instance, patch));\n  };\n  return Union;\n}\nunion.getDefaultName = getDefaultName;\nmodule.exports = union;","map":null,"metadata":{},"sourceType":"script"}