{"ast":null,"code":"import React from 'react';\nexport var getValidChildren = function getValidChildren(children) {\n  // .toArray automatically removes invalid React children\n  return React.Children.toArray(children);\n};\nvar getMax = function getMax(a, b) {\n  return a > b ? a : b;\n};\nvar getHeightOfSlide = function getHeightOfSlide(slide) {\n  if (!slide) {\n    return 0;\n  }\n  if (slide.children && slide.children.length > 0) {\n    var totalHeight = 0;\n    for (var i = 0; i < slide.children.length; ++i) {\n      totalHeight += slide.children[i].offsetHeight;\n    }\n    return totalHeight;\n  } else {\n    return slide.offsetHeight;\n  }\n}; // end - is exclusive\n\nexport var findMaxHeightSlideInRange = function findMaxHeightSlideInRange(slides, start, end) {\n  var maxHeight = 0;\n  if (slides.length === 0 || start < 0 || end < 0 || start > slides.length - 1 || end > slides.length) {\n    return maxHeight;\n  }\n  if (start < end) {\n    for (var i = start; i < end; i++) {\n      maxHeight = getMax(getHeightOfSlide(slides[i]), maxHeight);\n    }\n  } else if (start > end) {\n    // Finding max in a wrap around\n    for (var _i = start; _i < slides.length; _i++) {\n      maxHeight = getMax(getHeightOfSlide(slides[_i]), maxHeight);\n    }\n    for (var _i2 = 0; _i2 < end; _i2++) {\n      maxHeight = getMax(getHeightOfSlide(slides[_i2]), maxHeight);\n    }\n  } else {\n    // start === end\n    maxHeight = getHeightOfSlide(slides[start]);\n  }\n  return maxHeight;\n};\nvar ensureIndexInBounds = function ensureIndexInBounds(index, slideCount) {\n  var newIndex = index;\n  while (newIndex < 0) {\n    newIndex += slideCount;\n  }\n  while (newIndex > slideCount) {\n    newIndex -= slideCount;\n  }\n  return newIndex;\n};\nexport var findCurrentHeightSlide = function findCurrentHeightSlide(currentSlide, slidesToShow, alignment, wrapAround, slides) {\n  if (slidesToShow > 1) {\n    var startIndex = currentSlide;\n    var lastIndex = Math.min(Math.ceil(slidesToShow) + currentSlide, slides.length);\n    var offset = alignment === 'center' ? (slidesToShow - 1) / 2 : slidesToShow - 1;\n    switch (alignment) {\n      case 'center':\n        startIndex = Math.floor(currentSlide - offset);\n        lastIndex = Math.ceil(currentSlide + offset) + 1;\n        break;\n      case 'right':\n        startIndex = Math.floor(currentSlide - offset);\n        lastIndex = currentSlide + 1;\n        break;\n      case 'left':\n        startIndex = currentSlide;\n        lastIndex = Math.ceil(currentSlide + offset) + 1;\n        break;\n    } // inclusive\n\n    startIndex = wrapAround ? ensureIndexInBounds(startIndex, slides.length) : Math.max(startIndex, 0); // exclusive\n\n    lastIndex = wrapAround ? ensureIndexInBounds(lastIndex, slides.length) : Math.min(lastIndex, slides.length);\n    return findMaxHeightSlideInRange(slides, startIndex, lastIndex);\n  } else {\n    return getHeightOfSlide(slides[currentSlide]);\n  }\n};\nexport var calculateSlideHeight = function calculateSlideHeight(props, state) {\n  var childNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var heightMode = props.heightMode,\n    vertical = props.vertical,\n    initialSlideHeight = props.initialSlideHeight,\n    wrapAround = props.wrapAround;\n  var slidesToShow = state.slidesToShow,\n    currentSlide = state.currentSlide,\n    cellAlign = state.cellAlign;\n  var firstSlide = childNodes[0];\n  if (firstSlide && heightMode === 'first') {\n    return vertical ? getHeightOfSlide(firstSlide) * slidesToShow : getHeightOfSlide(firstSlide);\n  }\n  if (heightMode === 'max') {\n    return findMaxHeightSlideInRange(childNodes, 0, childNodes.length);\n  }\n  if (heightMode === 'current') {\n    return findCurrentHeightSlide(currentSlide, slidesToShow, cellAlign, wrapAround, childNodes);\n  }\n  return initialSlideHeight || 100;\n};","map":null,"metadata":{},"sourceType":"module"}