{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar config = {\n  // Default options\n  defaults: {},\n  // Error type\n  errorType: null,\n  // Polyfills\n  polyfills: {\n    fetch: null,\n    FormData: null,\n    URLSearchParams: null,\n    performance: null,\n    PerformanceObserver: null,\n    AbortController: null\n  },\n  polyfill: function polyfill(p, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.doThrow,\n      doThrow = _c === void 0 ? true : _c,\n      _d = _b.instance,\n      instance = _d === void 0 ? false : _d;\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n      args[_i - 2] = arguments[_i];\n    }\n    var res = this.polyfills[p] || (typeof self !== \"undefined\" ? self[p] : null) || (typeof global !== \"undefined\" ? global[p] : null);\n    if (doThrow && !res) throw new Error(p + \" is not defined\");\n    return instance && res ? new (res.bind.apply(res, __spreadArray([void 0], args, false)))() : res;\n  }\n};\nexport default config;","map":null,"metadata":{},"sourceType":"module"}