{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from 'react';\nimport { getAlignmentOffset } from './style-utilities';\nexport var addEvent = function addEvent(elem, type, eventHandle) {\n  if (elem === null || typeof elem === 'undefined') {\n    return;\n  }\n  if (elem.addEventListener) {\n    elem.addEventListener(type, eventHandle, false);\n  } else if (elem.attachEvent) {\n    elem.attachEvent(\"on\".concat(type), eventHandle);\n  } else {\n    elem[\"on\".concat(type)] = eventHandle;\n  }\n};\nexport var removeEvent = function removeEvent(elem, type, eventHandle) {\n  if (elem === null || typeof elem === 'undefined') {\n    return;\n  }\n  if (elem.removeEventListener) {\n    elem.removeEventListener(type, eventHandle, false);\n  } else if (elem.detachEvent) {\n    elem.detachEvent(\"on\".concat(type), eventHandle);\n  } else {\n    elem[\"on\".concat(type)] = null;\n  }\n};\nexport var addAccessibility = function addAccessibility(children, slidesToShow, currentSlide) {\n  var needsTabIndex;\n  if (slidesToShow > 1) {\n    return React.Children.map(children, function (child, index) {\n      var firstVisibleSlide = index >= currentSlide;\n      var lastVisibleSlide = index < slidesToShow + currentSlide;\n      needsTabIndex = firstVisibleSlide && lastVisibleSlide;\n      var ariaProps = needsTabIndex ? {\n        'aria-hidden': 'false',\n        tabIndex: 0\n      } : {\n        'aria-hidden': 'true'\n      };\n      return /*#__PURE__*/React.cloneElement(child, _objectSpread(_objectSpread({}, ariaProps), child.props));\n    });\n  } else {\n    return React.Children.map(children, function (child, index) {\n      needsTabIndex = index !== currentSlide;\n      var ariaProps = needsTabIndex ? {\n        'aria-hidden': 'true'\n      } : {\n        'aria-hidden': 'false',\n        tabIndex: 0\n      };\n      return /*#__PURE__*/React.cloneElement(child, _objectSpread(_objectSpread({}, ariaProps), child.props));\n    });\n  }\n};\nexport var getSlideClassName = function getSlideClassName(index, currentSlide, slidesToShow) {\n  var className = '';\n  var visible = index >= currentSlide && index < currentSlide + slidesToShow;\n  var current = index === currentSlide;\n  if (visible) {\n    className = ' slide-visible';\n    if (current) {\n      className = className.concat(' slide-current');\n    }\n  }\n  return className;\n};\nexport var getPropsByTransitionMode = function getPropsByTransitionMode(props, keys) {\n  var slidesToShow = props.slidesToShow,\n    transitionMode = props.transitionMode;\n  var updatedDefaults = {};\n  if (transitionMode === 'fade') {\n    keys.forEach(function (key) {\n      switch (key) {\n        case 'slidesToShow':\n          updatedDefaults[key] = Math.max(parseInt(slidesToShow), 1);\n          break;\n        case 'slidesToScroll':\n          updatedDefaults[key] = Math.max(parseInt(slidesToShow), 1);\n          break;\n        case 'cellAlign':\n          updatedDefaults[key] = 'left';\n          break;\n        default:\n          updatedDefaults[key] = props[key];\n          break;\n      }\n    });\n  } else {\n    keys.forEach(function (key) {\n      updatedDefaults[key] = props[key];\n    });\n  }\n  return updatedDefaults;\n};\nexport var swipeDirection = function swipeDirection(x1, x2, y1, y2, vertical) {\n  var xDist = x1 - x2;\n  var yDist = y1 - y2;\n  var r = Math.atan2(yDist, xDist);\n  var swipeAngle = Math.round(r * 180 / Math.PI);\n  if (swipeAngle < 0) {\n    swipeAngle = 360 - Math.abs(swipeAngle);\n  }\n  if (swipeAngle <= 45 && swipeAngle >= 0) {\n    return 1;\n  }\n  if (swipeAngle <= 360 && swipeAngle >= 315) {\n    return 1;\n  }\n  if (swipeAngle >= 135 && swipeAngle <= 225) {\n    return -1;\n  }\n  if (vertical === true) {\n    if (swipeAngle >= 35 && swipeAngle <= 135) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n  return 0;\n};\nexport var getSlideDirection = function getSlideDirection(start, end, isWrapping) {\n  var direction = 0;\n  if (start === end) return direction;\n  if (isWrapping) {\n    direction = start < end ? -1 : 1;\n  } else {\n    direction = start < end ? 1 : -1;\n  }\n  return direction;\n};\nexport var shouldUpdate = function shouldUpdate(curr, next, keys) {\n  var update = false;\n  for (var i = 0; i < keys.length; i++) {\n    if (curr[keys[i]] !== next[keys[i]]) {\n      update = true;\n      break;\n    }\n  }\n  return update;\n};\nexport var calcSomeInitialState = function calcSomeInitialState(props) {\n  var _getPropsByTransition = getPropsByTransitionMode(props, ['slidesToScroll', 'slidesToShow', 'cellAlign']),\n    slidesToScroll = _getPropsByTransition.slidesToScroll,\n    slidesToShow = _getPropsByTransition.slidesToShow,\n    cellAlign = _getPropsByTransition.cellAlign;\n  var slideWidth = props.vertical ? props.initialSlideHeight || 0 : props.initialSlideWidth || 0;\n  var slideHeight = props.vertical ? (props.initialSlideHeight || 0) * props.slidesToShow : props.initialSlideHeight || 0;\n  var frameHeight = slideHeight + props.cellSpacing * (slidesToShow - 1);\n  var frameWidth = props.vertical ? frameHeight : null;\n  return {\n    slideWidth: slideWidth,\n    slideHeight: slideHeight,\n    frameWidth: frameWidth,\n    slidesToScroll: slidesToScroll,\n    slidesToShow: slidesToShow,\n    cellAlign: cellAlign\n  };\n};\nexport var handleSelfFocus = function handleSelfFocus(e) {\n  if (e && e.currentTarget) {\n    e.currentTarget.focus();\n  }\n};\nexport var isFullyVisible = function isFullyVisible(slideIndex, config) {\n  var currentSlide = config.currentSlide,\n    cellSpacing = config.cellSpacing,\n    slideCount = config.slideCount,\n    slideWidth = config.slideWidth,\n    frameWidth = config.frameWidth,\n    wrapAround = config.wrapAround,\n    cellAlign = config.cellAlign; // Slide width can't be 0\n\n  var fullSlideWidth = slideWidth || 1; // Calculate offset without cellSpacing\n\n  var offsetWidth = getAlignmentOffset(currentSlide, config) + cellSpacing * currentSlide;\n  var remainingWidth = frameWidth - offsetWidth;\n  var fullSlidesBefore = 0;\n  if (cellAlign !== 'left') {\n    fullSlidesBefore = Math.max(Math.floor(offsetWidth / fullSlideWidth) + 1, 0);\n  } else {\n    fullSlidesBefore = Math.max(Math.floor(offsetWidth / fullSlideWidth), 0);\n  }\n  var fullSlidesAfter = Math.max(Math.floor(remainingWidth / fullSlideWidth), 0); // when slidesToScroll is auto enable clicking of all fully visible slides\n\n  if (fullSlidesAfter + fullSlidesBefore + currentSlide >= slideCount && !wrapAround) {\n    var fullSlidesAuto = fullSlidesBefore + fullSlidesAfter;\n    fullSlidesAfter = fullSlidesAuto;\n    fullSlidesBefore = fullSlidesAuto;\n  }\n  var currentSlideIndex = Math.ceil(currentSlide);\n  var fullyVisibleSlides = [];\n  for (var i = currentSlideIndex - fullSlidesBefore; i < currentSlideIndex + fullSlidesAfter + 1; i++) {\n    if (i < 0) {\n      // -1 won't match a slide index\n      fullyVisibleSlides.push(wrapAround ? slideCount + i : -1);\n    } else {\n      fullyVisibleSlides.push(i > slideCount - 1 ? i - slideCount : i);\n    }\n  }\n  return fullyVisibleSlides.includes(slideIndex);\n};","map":null,"metadata":{},"sourceType":"module"}