{"ast":null,"code":"import conf from \"./config\";\nvar onMatch = function onMatch(entries, name, callback, _performance) {\n  if (!entries.getEntriesByName) return false;\n  var matches = entries.getEntriesByName(name);\n  if (matches && matches.length > 0) {\n    callback(matches.reverse()[0]);\n    if (_performance.clearMeasures) _performance.clearMeasures(name);\n    perfs.callbacks.delete(name);\n    if (perfs.callbacks.size < 1) {\n      perfs.observer.disconnect();\n      if (_performance.clearResourceTimings) {\n        _performance.clearResourceTimings();\n      }\n    }\n    return true;\n  }\n  return false;\n};\nvar lazyObserver = function lazyObserver(_performance, _observer) {\n  if (!perfs.observer && _performance && _observer) {\n    perfs.observer = new _observer(function (entries) {\n      perfs.callbacks.forEach(function (callback, name) {\n        onMatch(entries, name, callback, _performance);\n      });\n    });\n    if (_performance.clearResourceTimings) _performance.clearResourceTimings();\n  }\n  return perfs.observer;\n};\nvar perfs = {\n  callbacks: new Map(),\n  observer: null,\n  observe: function observe(name, callback) {\n    if (!name || !callback) return;\n    var _performance = conf.polyfill(\"performance\", {\n      doThrow: false\n    });\n    var _observer = conf.polyfill(\"PerformanceObserver\", {\n      doThrow: false\n    });\n    if (!lazyObserver(_performance, _observer)) return;\n    if (!onMatch(_performance, name, callback, _performance)) {\n      if (perfs.callbacks.size < 1) perfs.observer.observe({\n        entryTypes: [\"resource\", \"measure\"]\n      });\n      perfs.callbacks.set(name, callback);\n    }\n  }\n};\nexport default perfs;","map":null,"metadata":{},"sourceType":"module"}