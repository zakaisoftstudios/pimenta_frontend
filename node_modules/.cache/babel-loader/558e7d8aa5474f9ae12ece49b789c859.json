{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar React = require('react');\nvar PropTypes = require('prop-types');\nvar actioncable = require('actioncable');\nvar createReactClass = require('create-react-class');\nvar ActionCableProvider = createReactClass({\n  getChildContext: function getChildContext() {\n    return {\n      cable: this.cable\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    if (this.props.cable) {\n      this.cable = this.props.cable;\n    } else {\n      this.cable = actioncable.createConsumer(this.props.url);\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (!this.props.cable && this.cable) {\n      this.cable.disconnect();\n    }\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    // Props not changed\n    if (this.props.cable === nextProps.cable && this.props.url === nextProps.url) {\n      return;\n    }\n\n    // cable is created by self, disconnect it\n    this.componentWillUnmount();\n\n    // create or assign cable\n    this.componentWillMount();\n  },\n  render: function render() {\n    return this.props.children || null;\n  }\n});\nActionCableProvider.displayName = 'ActionCableProvider';\nActionCableProvider.propTypes = {\n  cable: PropTypes.object,\n  url: PropTypes.string,\n  children: PropTypes.any\n};\nActionCableProvider.childContextTypes = {\n  cable: PropTypes.object.isRequired\n};\nvar ActionCable = createReactClass({\n  componentDidMount: function componentDidMount() {\n    var self = this;\n    var _props = this.props,\n      onReceived = _props.onReceived,\n      onInitialized = _props.onInitialized,\n      onConnected = _props.onConnected,\n      onDisconnected = _props.onDisconnected,\n      onRejected = _props.onRejected;\n    this.cable = this.context.cable.subscriptions.create(this.props.channel, {\n      received: function received(data) {\n        onReceived && onReceived(data);\n      },\n      initialized: function initialized() {\n        onInitialized && onInitialized();\n      },\n      connected: function connected() {\n        onConnected && onConnected();\n      },\n      disconnected: function disconnected() {\n        onDisconnected && onDisconnected();\n      },\n      rejected: function rejected() {\n        onRejected && onRejected();\n      }\n    });\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this.cable) {\n      this.context.cable.subscriptions.remove(this.cable);\n      this.cable = null;\n    }\n  },\n  send: function send(data) {\n    if (!this.cable) {\n      throw new Error('ActionCable component unloaded');\n    }\n    this.cable.send(data);\n  },\n  perform: function perform(action, data) {\n    if (!this.cable) {\n      throw new Error('ActionCable component unloaded');\n    }\n    this.cable.perform(action, data);\n  },\n  render: function render() {\n    return this.props.children || null;\n  }\n});\nActionCable.displayName = 'ActionCable';\nActionCable.propTypes = {\n  onReceived: PropTypes.func,\n  onInitialized: PropTypes.func,\n  onConnected: PropTypes.func,\n  onDisconnected: PropTypes.func,\n  onRejected: PropTypes.func,\n  children: PropTypes.any\n};\nActionCable.contextTypes = {\n  cable: PropTypes.object.isRequired\n};\nexports.ActionCable = ActionCable;\nexports.ActionCableProvider = ActionCableProvider;\n\n// Compatible old usage\nexports.default = ActionCableProvider;","map":null,"metadata":{},"sourceType":"script"}