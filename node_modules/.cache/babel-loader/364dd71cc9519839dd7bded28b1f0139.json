{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc';\n// TODO: Implement different loggers for different environments\nvar global = getGlobalObject();\n/** Prefix for logging strings */\nvar PREFIX = 'Sentry Logger ';\n/** JSDoc */\nvar Logger = /** @class */function () {\n  /** JSDoc */\n  function Logger() {\n    this._enabled = false;\n  }\n  /** JSDoc */\n  Logger.prototype.disable = function () {\n    this._enabled = false;\n  };\n  /** JSDoc */\n  Logger.prototype.enable = function () {\n    this._enabled = true;\n  };\n  /** JSDoc */\n  Logger.prototype.log = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(function () {\n      global.console.log(PREFIX + \"[Log]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n  Logger.prototype.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(function () {\n      global.console.warn(PREFIX + \"[Warn]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n  Logger.prototype.error = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(function () {\n      global.console.error(PREFIX + \"[Error]: \" + args.join(' '));\n    });\n  };\n  return Logger;\n}();\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nvar logger = global.__SENTRY__.logger || (global.__SENTRY__.logger = new Logger());\nexport { logger };","map":null,"metadata":{},"sourceType":"module"}