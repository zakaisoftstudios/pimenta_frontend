{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(require(\"react\"));else if (typeof define === 'function' && define.amd) define([\"react\"], factory);else if (typeof exports === 'object') exports[\"Cleave\"] = factory(require(\"react\"));else root[\"Cleave\"] = factory(root[\"React\"]);\n})(this, function (__WEBPACK_EXTERNAL_MODULE_1__) {\n  return (/******/function (modules) {\n      // webpackBootstrap\n      /******/ // The module cache\n      /******/\n      var installedModules = {};\n\n      /******/ // The require function\n      /******/\n      function __webpack_require__(moduleId) {\n        /******/ // Check if module is in cache\n        /******/if (installedModules[moduleId]) /******/return installedModules[moduleId].exports;\n\n        /******/ // Create a new module (and put it into the cache)\n        /******/\n        var module = installedModules[moduleId] = {\n          /******/exports: {},\n          /******/id: moduleId,\n          /******/loaded: false\n          /******/\n        };\n\n        /******/ // Execute the module function\n        /******/\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n        /******/ // Flag the module as loaded\n        /******/\n        module.loaded = true;\n\n        /******/ // Return the exports of the module\n        /******/\n        return module.exports;\n        /******/\n      }\n\n      /******/ // expose the modules object (__webpack_modules__)\n      /******/\n      __webpack_require__.m = modules;\n\n      /******/ // expose the module cache\n      /******/\n      __webpack_require__.c = installedModules;\n\n      /******/ // __webpack_public_path__\n      /******/\n      __webpack_require__.p = \"\";\n\n      /******/ // Load entry module and return exports\n      /******/\n      return __webpack_require__(0);\n      /******/\n    }\n    /************************************************************************/\n    /******/([/* 0 */\n    /***/function (module, exports, __webpack_require__) {\n      'use strict';\n\n      var _extends = Object.assign || function (target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i];\n          for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n              target[key] = source[key];\n            }\n          }\n        }\n        return target;\n      };\n      function _objectWithoutProperties(obj, keys) {\n        var target = {};\n        for (var i in obj) {\n          if (keys.indexOf(i) >= 0) continue;\n          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n          target[i] = obj[i];\n        }\n        return target;\n      }\n      var React = __webpack_require__(1); // eslint-disable-line no-unused-vars\n      var CreateReactClass = __webpack_require__(2);\n      var NumeralFormatter = __webpack_require__(9);\n      var DateFormatter = __webpack_require__(10);\n      var TimeFormatter = __webpack_require__(11);\n      var PhoneFormatter = __webpack_require__(12);\n      var CreditCardDetector = __webpack_require__(13);\n      var Util = __webpack_require__(14);\n      var DefaultProperties = __webpack_require__(15);\n      var cleaveReactClass = CreateReactClass({\n        componentDidMount: function componentDidMount() {\n          this.init();\n        },\n        componentDidUpdate: function componentDidUpdate() {\n          var owner = this,\n            pps = owner.properties;\n          Util.setSelection(owner.element, owner.state.cursorPosition, pps.document);\n        },\n        componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n          var owner = this,\n            phoneRegionCode = (nextProps.options || {}).phoneRegionCode,\n            newValue = nextProps.value;\n          if (newValue !== undefined) {\n            newValue = newValue.toString();\n            if (newValue !== owner.properties.initValue && newValue !== owner.properties.result) {\n              owner.properties.initValue = newValue;\n              owner.onInput(newValue, true);\n            }\n          }\n\n          // update phone region code\n          if (phoneRegionCode && phoneRegionCode !== owner.properties.phoneRegionCode) {\n            owner.properties.phoneRegionCode = phoneRegionCode;\n            owner.initPhoneFormatter();\n            owner.onInput(owner.properties.result);\n          }\n        },\n        getInitialState: function getInitialState() {\n          var owner = this,\n            _owner$props = owner.props,\n            value = _owner$props.value,\n            options = _owner$props.options,\n            onKeyDown = _owner$props.onKeyDown,\n            onChange = _owner$props.onChange,\n            onFocus = _owner$props.onFocus,\n            onBlur = _owner$props.onBlur,\n            onInit = _owner$props.onInit;\n          owner.registeredEvents = {\n            onInit: onInit || Util.noop,\n            onChange: onChange || Util.noop,\n            onFocus: onFocus || Util.noop,\n            onBlur: onBlur || Util.noop,\n            onKeyDown: onKeyDown || Util.noop\n          };\n          if (!options) {\n            options = {};\n          }\n          options.initValue = value;\n          owner.properties = DefaultProperties.assign({}, options);\n          return {\n            value: owner.properties.result,\n            cursorPosition: 0\n          };\n        },\n        init: function init() {\n          var owner = this,\n            pps = owner.properties;\n\n          // so no need for this lib at all\n          if (!pps.numeral && !pps.phone && !pps.creditCard && !pps.time && !pps.date && pps.blocksLength === 0 && !pps.prefix) {\n            owner.onInput(pps.initValue);\n            owner.registeredEvents.onInit(owner);\n            return;\n          }\n          pps.maxLength = Util.getMaxLength(pps.blocks);\n          owner.isAndroid = Util.isAndroid();\n          owner.initPhoneFormatter();\n          owner.initDateFormatter();\n          owner.initTimeFormatter();\n          owner.initNumeralFormatter();\n\n          // avoid touch input field if value is null\n          // otherwise Firefox will add red box-shadow for <input required />\n          if (pps.initValue || pps.prefix && !pps.noImmediatePrefix) {\n            owner.onInput(pps.initValue);\n          }\n          owner.registeredEvents.onInit(owner);\n        },\n        initNumeralFormatter: function initNumeralFormatter() {\n          var owner = this,\n            pps = owner.properties;\n          if (!pps.numeral) {\n            return;\n          }\n          pps.numeralFormatter = new NumeralFormatter(pps.numeralDecimalMark, pps.numeralIntegerScale, pps.numeralDecimalScale, pps.numeralThousandsGroupStyle, pps.numeralPositiveOnly, pps.stripLeadingZeroes, pps.delimiter);\n        },\n        initTimeFormatter: function initTimeFormatter() {\n          var owner = this,\n            pps = owner.properties;\n          if (!pps.time) {\n            return;\n          }\n          pps.timeFormatter = new TimeFormatter(pps.timePattern, pps.timeFormat);\n          pps.blocks = pps.timeFormatter.getBlocks();\n          pps.blocksLength = pps.blocks.length;\n          pps.maxLength = Util.getMaxLength(pps.blocks);\n        },\n        initDateFormatter: function initDateFormatter() {\n          var owner = this,\n            pps = owner.properties;\n          if (!pps.date) {\n            return;\n          }\n          pps.dateFormatter = new DateFormatter(pps.datePattern);\n          pps.blocks = pps.dateFormatter.getBlocks();\n          pps.blocksLength = pps.blocks.length;\n          pps.maxLength = Util.getMaxLength(pps.blocks);\n        },\n        initPhoneFormatter: function initPhoneFormatter() {\n          var owner = this,\n            pps = owner.properties;\n          if (!pps.phone) {\n            return;\n          }\n\n          // Cleave.AsYouTypeFormatter should be provided by\n          // external google closure lib\n          try {\n            pps.phoneFormatter = new PhoneFormatter(new pps.root.Cleave.AsYouTypeFormatter(pps.phoneRegionCode), pps.delimiter);\n          } catch (ex) {\n            throw new Error('Please include phone-type-formatter.{country}.js lib');\n          }\n        },\n        setRawValue: function setRawValue(value) {\n          var owner = this,\n            pps = owner.properties;\n          value = value !== undefined && value !== null ? value.toString() : '';\n          if (pps.numeral) {\n            value = value.replace('.', pps.numeralDecimalMark);\n          }\n          pps.postDelimiterBackspace = false;\n          owner.onChange({\n            target: {\n              value: value\n            },\n            // Methods to better resemble a SyntheticEvent\n            stopPropagation: Util.noop,\n            preventDefault: Util.noop,\n            persist: Util.noop\n          });\n        },\n        getRawValue: function getRawValue() {\n          var owner = this,\n            pps = owner.properties,\n            rawValue = pps.result;\n          if (pps.rawValueTrimPrefix) {\n            rawValue = Util.getPrefixStrippedValue(rawValue, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters);\n          }\n          if (pps.numeral) {\n            rawValue = pps.numeralFormatter ? pps.numeralFormatter.getRawValue(rawValue) : '';\n          } else {\n            rawValue = Util.stripDelimiters(rawValue, pps.delimiter, pps.delimiters);\n          }\n          return rawValue;\n        },\n        getISOFormatDate: function getISOFormatDate() {\n          var owner = this,\n            pps = owner.properties;\n          return pps.date ? pps.dateFormatter.getISOFormatDate() : '';\n        },\n        getISOFormatTime: function getISOFormatTime() {\n          var owner = this,\n            pps = owner.properties;\n          return pps.time ? pps.timeFormatter.getISOFormatTime() : '';\n        },\n        onInit: function onInit(owner) {\n          return owner;\n        },\n        onKeyDown: function onKeyDown(event) {\n          var owner = this,\n            pps = owner.properties,\n            charCode = event.which || event.keyCode;\n\n          // if we got any charCode === 8, this means, that this device correctly\n          // sends backspace keys in event, so we do not need to apply any hacks\n          owner.hasBackspaceSupport = owner.hasBackspaceSupport || charCode === 8;\n          if (!owner.hasBackspaceSupport && Util.isAndroidBackspaceKeydown(owner.lastInputValue, pps.result)) {\n            charCode = 8;\n          }\n\n          // hit backspace when last character is delimiter\n          var postDelimiter = Util.getPostDelimiter(pps.result, pps.delimiter, pps.delimiters);\n          if (charCode === 8 && postDelimiter) {\n            pps.postDelimiterBackspace = postDelimiter;\n          } else {\n            pps.postDelimiterBackspace = false;\n          }\n          owner.registeredEvents.onKeyDown(event);\n        },\n        onFocus: function onFocus(event) {\n          var owner = this,\n            pps = owner.properties;\n          event.target.rawValue = owner.getRawValue();\n          event.target.value = pps.result;\n          owner.registeredEvents.onFocus(event);\n          Util.fixPrefixCursor(owner.element, pps.prefix, pps.delimiter, pps.delimiters);\n        },\n        onBlur: function onBlur(event) {\n          var owner = this,\n            pps = owner.properties;\n          event.target.rawValue = owner.getRawValue();\n          event.target.value = pps.result;\n          owner.registeredEvents.onBlur(event);\n        },\n        onChange: function onChange(event) {\n          var owner = this,\n            pps = owner.properties;\n          owner.onInput(event.target.value);\n          event.target.rawValue = owner.getRawValue();\n          event.target.value = pps.result;\n          owner.registeredEvents.onChange(event);\n        },\n        onInput: function onInput(value, fromProps) {\n          var owner = this,\n            pps = owner.properties;\n\n          // case 1: delete one more character \"4\"\n          // 1234*| -> hit backspace -> 123|\n          // case 2: last character is not delimiter which is:\n          // 12|34* -> hit backspace -> 1|34*\n          var postDelimiterAfter = Util.getPostDelimiter(value, pps.delimiter, pps.delimiters);\n          if (!fromProps && !pps.numeral && pps.postDelimiterBackspace && !postDelimiterAfter) {\n            value = Util.headStr(value, value.length - pps.postDelimiterBackspace.length);\n          }\n\n          // phone formatter\n          if (pps.phone) {\n            if (pps.prefix && (!pps.noImmediatePrefix || value.length)) {\n              pps.result = pps.prefix + pps.phoneFormatter.format(value).slice(pps.prefix.length);\n            } else {\n              pps.result = pps.phoneFormatter.format(value);\n            }\n            owner.updateValueState();\n            return;\n          }\n\n          // numeral formatter\n          if (pps.numeral) {\n            if (pps.prefix && (!pps.noImmediatePrefix || value.length)) {\n              pps.result = pps.prefix + pps.numeralFormatter.format(value);\n            } else {\n              pps.result = pps.numeralFormatter.format(value);\n            }\n            owner.updateValueState();\n            return;\n          }\n\n          // date\n          if (pps.date) {\n            value = pps.dateFormatter.getValidatedDate(value);\n          }\n\n          // time\n          if (pps.time) {\n            value = pps.timeFormatter.getValidatedTime(value);\n          }\n\n          // strip delimiters\n          value = Util.stripDelimiters(value, pps.delimiter, pps.delimiters);\n\n          // strip prefix\n          value = Util.getPrefixStrippedValue(value, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters);\n\n          // strip non-numeric characters\n          value = pps.numericOnly ? Util.strip(value, /[^\\d]/g) : value;\n\n          // convert case\n          value = pps.uppercase ? value.toUpperCase() : value;\n          value = pps.lowercase ? value.toLowerCase() : value;\n\n          // prefix\n          if (pps.prefix && (!pps.noImmediatePrefix || value.length)) {\n            value = pps.prefix + value;\n\n            // no blocks specified, no need to do formatting\n            if (pps.blocksLength === 0) {\n              pps.result = value;\n              owner.updateValueState();\n              return;\n            }\n          }\n\n          // update credit card props\n          if (pps.creditCard) {\n            owner.updateCreditCardPropsByValue(value);\n          }\n\n          // strip over length characters\n          value = pps.maxLength > 0 ? Util.headStr(value, pps.maxLength) : value;\n\n          // apply blocks\n          pps.result = Util.getFormattedValue(value, pps.blocks, pps.blocksLength, pps.delimiter, pps.delimiters, pps.delimiterLazyShow);\n          owner.updateValueState();\n        },\n        updateCreditCardPropsByValue: function updateCreditCardPropsByValue(value) {\n          var owner = this,\n            pps = owner.properties,\n            creditCardInfo;\n\n          // At least one of the first 4 characters has changed\n          if (Util.headStr(pps.result, 4) === Util.headStr(value, 4)) {\n            return;\n          }\n          creditCardInfo = CreditCardDetector.getInfo(value, pps.creditCardStrictMode);\n          pps.blocks = creditCardInfo.blocks;\n          pps.blocksLength = pps.blocks.length;\n          pps.maxLength = Util.getMaxLength(pps.blocks);\n\n          // credit card type changed\n          if (pps.creditCardType !== creditCardInfo.type) {\n            pps.creditCardType = creditCardInfo.type;\n            pps.onCreditCardTypeChanged.call(owner, pps.creditCardType);\n          }\n        },\n        updateValueState: function updateValueState() {\n          var owner = this,\n            pps = owner.properties;\n          if (!owner.element) {\n            owner.setState({\n              value: pps.result\n            });\n          }\n          var endPos = owner.element.selectionEnd;\n          var oldValue = owner.element.value;\n          var newValue = pps.result;\n          owner.lastInputValue = newValue;\n          endPos = Util.getNextCursorPosition(endPos, oldValue, newValue, pps.delimiter, pps.delimiters);\n          if (owner.isAndroid) {\n            window.setTimeout(function () {\n              owner.setState({\n                value: newValue,\n                cursorPosition: endPos\n              });\n            }, 1);\n            return;\n          }\n          owner.setState({\n            value: newValue,\n            cursorPosition: endPos\n          });\n        },\n        render: function render() {\n          var owner = this;\n          // eslint-disable-next-line\n\n          var _owner$props2 = owner.props,\n            value = _owner$props2.value,\n            options = _owner$props2.options,\n            onKeyDown = _owner$props2.onKeyDown,\n            onFocus = _owner$props2.onFocus,\n            onBlur = _owner$props2.onBlur,\n            onChange = _owner$props2.onChange,\n            onInit = _owner$props2.onInit,\n            htmlRef = _owner$props2.htmlRef,\n            propsToTransfer = _objectWithoutProperties(_owner$props2, ['value', 'options', 'onKeyDown', 'onFocus', 'onBlur', 'onChange', 'onInit', 'htmlRef']);\n          return React.createElement('input', _extends({\n            type: 'text',\n            ref: function ref(_ref) {\n              owner.element = _ref;\n              if (!htmlRef) {\n                return;\n              }\n              htmlRef.apply(this, arguments);\n            },\n            value: owner.state.value,\n            onKeyDown: owner.onKeyDown,\n            onChange: owner.onChange,\n            onFocus: owner.onFocus,\n            onBlur: owner.onBlur\n          }, propsToTransfer));\n        }\n      });\n      module.exports = cleaveReactClass;\n\n      /***/\n    }, /* 1 */\n    /***/function (module, exports) {\n      module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n      /***/\n    }, /* 2 */\n    /***/function (module, exports, __webpack_require__) {\n      /**\n       * Copyright 2013-present, Facebook, Inc.\n       * All rights reserved.\n       *\n       * This source code is licensed under the BSD-style license found in the\n       * LICENSE file in the root directory of this source tree. An additional grant\n       * of patent rights can be found in the PATENTS file in the same directory.\n       *\n       */\n\n      'use strict';\n\n      var React = __webpack_require__(1);\n      var factory = __webpack_require__(3);\n      if (typeof React === 'undefined') {\n        throw Error('create-react-class could not find the React object. If you are using script tags, ' + 'make sure that React is being loaded before create-react-class.');\n      }\n\n      // Hack to grab NoopUpdateQueue from isomorphic React\n      var ReactNoopUpdateQueue = new React.Component().updater;\n      module.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);\n\n      /***/\n    }, /* 3 */\n    /***/function (module, exports, __webpack_require__) {\n      /**\n       * Copyright 2013-present, Facebook, Inc.\n       * All rights reserved.\n       *\n       * This source code is licensed under the BSD-style license found in the\n       * LICENSE file in the root directory of this source tree. An additional grant\n       * of patent rights can be found in the PATENTS file in the same directory.\n       *\n       */\n\n      'use strict';\n\n      var _assign = __webpack_require__(4);\n      var emptyObject = __webpack_require__(5);\n      var _invariant = __webpack_require__(6);\n      if (process.env.NODE_ENV !== 'production') {\n        var warning = __webpack_require__(7);\n      }\n      var MIXINS_KEY = 'mixins';\n\n      // Helper function to allow the creation of anonymous functions which do not\n      // have .name set to the name of the variable being assigned to.\n      function identity(fn) {\n        return fn;\n      }\n      var ReactPropTypeLocationNames;\n      if (process.env.NODE_ENV !== 'production') {\n        ReactPropTypeLocationNames = {\n          prop: 'prop',\n          context: 'context',\n          childContext: 'child context'\n        };\n      } else {\n        ReactPropTypeLocationNames = {};\n      }\n      function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n        /**\n         * Policies that describe methods in `ReactClassInterface`.\n         */\n\n        var injectedMixins = [];\n\n        /**\n         * Composite components are higher-level components that compose other composite\n         * or host components.\n         *\n         * To create a new type of `ReactClass`, pass a specification of\n         * your new class to `React.createClass`. The only requirement of your class\n         * specification is that you implement a `render` method.\n         *\n         *   var MyComponent = React.createClass({\n         *     render: function() {\n         *       return <div>Hello World</div>;\n         *     }\n         *   });\n         *\n         * The class specification supports a specific protocol of methods that have\n         * special meaning (e.g. `render`). See `ReactClassInterface` for\n         * more the comprehensive protocol. Any other properties and methods in the\n         * class specification will be available on the prototype.\n         *\n         * @interface ReactClassInterface\n         * @internal\n         */\n        var ReactClassInterface = {\n          /**\n           * An array of Mixin objects to include when defining your component.\n           *\n           * @type {array}\n           * @optional\n           */\n          mixins: 'DEFINE_MANY',\n          /**\n           * An object containing properties and methods that should be defined on\n           * the component's constructor instead of its prototype (static methods).\n           *\n           * @type {object}\n           * @optional\n           */\n          statics: 'DEFINE_MANY',\n          /**\n           * Definition of prop types for this component.\n           *\n           * @type {object}\n           * @optional\n           */\n          propTypes: 'DEFINE_MANY',\n          /**\n           * Definition of context types for this component.\n           *\n           * @type {object}\n           * @optional\n           */\n          contextTypes: 'DEFINE_MANY',\n          /**\n           * Definition of context types this component sets for its children.\n           *\n           * @type {object}\n           * @optional\n           */\n          childContextTypes: 'DEFINE_MANY',\n          // ==== Definition methods ====\n\n          /**\n           * Invoked when the component is mounted. Values in the mapping will be set on\n           * `this.props` if that prop is not specified (i.e. using an `in` check).\n           *\n           * This method is invoked before `getInitialState` and therefore cannot rely\n           * on `this.state` or use `this.setState`.\n           *\n           * @return {object}\n           * @optional\n           */\n          getDefaultProps: 'DEFINE_MANY_MERGED',\n          /**\n           * Invoked once before the component is mounted. The return value will be used\n           * as the initial value of `this.state`.\n           *\n           *   getInitialState: function() {\n           *     return {\n           *       isOn: false,\n           *       fooBaz: new BazFoo()\n           *     }\n           *   }\n           *\n           * @return {object}\n           * @optional\n           */\n          getInitialState: 'DEFINE_MANY_MERGED',\n          /**\n           * @return {object}\n           * @optional\n           */\n          getChildContext: 'DEFINE_MANY_MERGED',\n          /**\n           * Uses props from `this.props` and state from `this.state` to render the\n           * structure of the component.\n           *\n           * No guarantees are made about when or how often this method is invoked, so\n           * it must not have side effects.\n           *\n           *   render: function() {\n           *     var name = this.props.name;\n           *     return <div>Hello, {name}!</div>;\n           *   }\n           *\n           * @return {ReactComponent}\n           * @required\n           */\n          render: 'DEFINE_ONCE',\n          // ==== Delegate methods ====\n\n          /**\n           * Invoked when the component is initially created and about to be mounted.\n           * This may have side effects, but any external subscriptions or data created\n           * by this method must be cleaned up in `componentWillUnmount`.\n           *\n           * @optional\n           */\n          componentWillMount: 'DEFINE_MANY',\n          /**\n           * Invoked when the component has been mounted and has a DOM representation.\n           * However, there is no guarantee that the DOM node is in the document.\n           *\n           * Use this as an opportunity to operate on the DOM when the component has\n           * been mounted (initialized and rendered) for the first time.\n           *\n           * @param {DOMElement} rootNode DOM element representing the component.\n           * @optional\n           */\n          componentDidMount: 'DEFINE_MANY',\n          /**\n           * Invoked before the component receives new props.\n           *\n           * Use this as an opportunity to react to a prop transition by updating the\n           * state using `this.setState`. Current props are accessed via `this.props`.\n           *\n           *   componentWillReceiveProps: function(nextProps, nextContext) {\n           *     this.setState({\n           *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n           *     });\n           *   }\n           *\n           * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n           * transition may cause a state change, but the opposite is not true. If you\n           * need it, you are probably looking for `componentWillUpdate`.\n           *\n           * @param {object} nextProps\n           * @optional\n           */\n          componentWillReceiveProps: 'DEFINE_MANY',\n          /**\n           * Invoked while deciding if the component should be updated as a result of\n           * receiving new props, state and/or context.\n           *\n           * Use this as an opportunity to `return false` when you're certain that the\n           * transition to the new props/state/context will not require a component\n           * update.\n           *\n           *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n           *     return !equal(nextProps, this.props) ||\n           *       !equal(nextState, this.state) ||\n           *       !equal(nextContext, this.context);\n           *   }\n           *\n           * @param {object} nextProps\n           * @param {?object} nextState\n           * @param {?object} nextContext\n           * @return {boolean} True if the component should update.\n           * @optional\n           */\n          shouldComponentUpdate: 'DEFINE_ONCE',\n          /**\n           * Invoked when the component is about to update due to a transition from\n           * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n           * and `nextContext`.\n           *\n           * Use this as an opportunity to perform preparation before an update occurs.\n           *\n           * NOTE: You **cannot** use `this.setState()` in this method.\n           *\n           * @param {object} nextProps\n           * @param {?object} nextState\n           * @param {?object} nextContext\n           * @param {ReactReconcileTransaction} transaction\n           * @optional\n           */\n          componentWillUpdate: 'DEFINE_MANY',\n          /**\n           * Invoked when the component's DOM representation has been updated.\n           *\n           * Use this as an opportunity to operate on the DOM when the component has\n           * been updated.\n           *\n           * @param {object} prevProps\n           * @param {?object} prevState\n           * @param {?object} prevContext\n           * @param {DOMElement} rootNode DOM element representing the component.\n           * @optional\n           */\n          componentDidUpdate: 'DEFINE_MANY',\n          /**\n           * Invoked when the component is about to be removed from its parent and have\n           * its DOM representation destroyed.\n           *\n           * Use this as an opportunity to deallocate any external resources.\n           *\n           * NOTE: There is no `componentDidUnmount` since your component will have been\n           * destroyed by that point.\n           *\n           * @optional\n           */\n          componentWillUnmount: 'DEFINE_MANY',\n          // ==== Advanced methods ====\n\n          /**\n           * Updates the component's currently mounted DOM representation.\n           *\n           * By default, this implements React's rendering and reconciliation algorithm.\n           * Sophisticated clients may wish to override this.\n           *\n           * @param {ReactReconcileTransaction} transaction\n           * @internal\n           * @overridable\n           */\n          updateComponent: 'OVERRIDE_BASE'\n        };\n\n        /**\n         * Mapping from class specification keys to special processing functions.\n         *\n         * Although these are declared like instance properties in the specification\n         * when defining classes using `React.createClass`, they are actually static\n         * and are accessible on the constructor instead of the prototype. Despite\n         * being static, they must be defined outside of the \"statics\" key under\n         * which all other static methods are defined.\n         */\n        var RESERVED_SPEC_KEYS = {\n          displayName: function displayName(Constructor, _displayName) {\n            Constructor.displayName = _displayName;\n          },\n          mixins: function mixins(Constructor, _mixins) {\n            if (_mixins) {\n              for (var i = 0; i < _mixins.length; i++) {\n                mixSpecIntoComponent(Constructor, _mixins[i]);\n              }\n            }\n          },\n          childContextTypes: function childContextTypes(Constructor, _childContextTypes) {\n            if (process.env.NODE_ENV !== 'production') {\n              validateTypeDef(Constructor, _childContextTypes, 'childContext');\n            }\n            Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);\n          },\n          contextTypes: function contextTypes(Constructor, _contextTypes) {\n            if (process.env.NODE_ENV !== 'production') {\n              validateTypeDef(Constructor, _contextTypes, 'context');\n            }\n            Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);\n          },\n          /**\n           * Special case getDefaultProps which should move into statics but requires\n           * automatic merging.\n           */\n          getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {\n            if (Constructor.getDefaultProps) {\n              Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);\n            } else {\n              Constructor.getDefaultProps = _getDefaultProps;\n            }\n          },\n          propTypes: function propTypes(Constructor, _propTypes) {\n            if (process.env.NODE_ENV !== 'production') {\n              validateTypeDef(Constructor, _propTypes, 'prop');\n            }\n            Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);\n          },\n          statics: function statics(Constructor, _statics) {\n            mixStaticSpecIntoComponent(Constructor, _statics);\n          },\n          autobind: function autobind() {}\n        };\n        function validateTypeDef(Constructor, typeDef, location) {\n          for (var propName in typeDef) {\n            if (typeDef.hasOwnProperty(propName)) {\n              // use a warning instead of an _invariant so components\n              // don't show up in prod but only in __DEV__\n              if (process.env.NODE_ENV !== 'production') {\n                warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);\n              }\n            }\n          }\n        }\n        function validateMethodOverride(isAlreadyDefined, name) {\n          var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;\n\n          // Disallow overriding of base class methods unless explicitly allowed.\n          if (ReactClassMixin.hasOwnProperty(name)) {\n            _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);\n          }\n\n          // Disallow defining methods more than once unless explicitly allowed.\n          if (isAlreadyDefined) {\n            _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);\n          }\n        }\n\n        /**\n         * Mixin helper which handles policy validation and reserved\n         * specification keys when building React classes.\n         */\n        function mixSpecIntoComponent(Constructor, spec) {\n          if (!spec) {\n            if (process.env.NODE_ENV !== 'production') {\n              var typeofSpec = typeof spec;\n              var isMixinValid = typeofSpec === 'object' && spec !== null;\n              if (process.env.NODE_ENV !== 'production') {\n                warning(isMixinValid, \"%s: You're attempting to include a mixin that is either null \" + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);\n              }\n            }\n            return;\n          }\n          _invariant(typeof spec !== 'function', \"ReactClass: You're attempting to \" + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');\n          _invariant(!isValidElement(spec), \"ReactClass: You're attempting to \" + 'use a component as a mixin. Instead, just use a regular object.');\n          var proto = Constructor.prototype;\n          var autoBindPairs = proto.__reactAutoBindPairs;\n\n          // By handling mixins before any other properties, we ensure the same\n          // chaining order is applied to methods with DEFINE_MANY policy, whether\n          // mixins are listed before or after these methods in the spec.\n          if (spec.hasOwnProperty(MIXINS_KEY)) {\n            RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n          }\n          for (var name in spec) {\n            if (!spec.hasOwnProperty(name)) {\n              continue;\n            }\n            if (name === MIXINS_KEY) {\n              // We have already handled mixins in a special case above.\n              continue;\n            }\n            var property = spec[name];\n            var isAlreadyDefined = proto.hasOwnProperty(name);\n            validateMethodOverride(isAlreadyDefined, name);\n            if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n              RESERVED_SPEC_KEYS[name](Constructor, property);\n            } else {\n              // Setup methods on prototype:\n              // The following member methods should not be automatically bound:\n              // 1. Expected ReactClass methods (in the \"interface\").\n              // 2. Overridden methods (that were mixed in).\n              var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n              var isFunction = typeof property === 'function';\n              var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n              if (shouldAutoBind) {\n                autoBindPairs.push(name, property);\n                proto[name] = property;\n              } else {\n                if (isAlreadyDefined) {\n                  var specPolicy = ReactClassInterface[name];\n\n                  // These cases should already be caught by validateMethodOverride.\n                  _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);\n\n                  // For methods which are defined more than once, call the existing\n                  // methods before calling the new property, merging if appropriate.\n                  if (specPolicy === 'DEFINE_MANY_MERGED') {\n                    proto[name] = createMergedResultFunction(proto[name], property);\n                  } else if (specPolicy === 'DEFINE_MANY') {\n                    proto[name] = createChainedFunction(proto[name], property);\n                  }\n                } else {\n                  proto[name] = property;\n                  if (process.env.NODE_ENV !== 'production') {\n                    // Add verbose displayName to the function, which helps when looking\n                    // at profiling tools.\n                    if (typeof property === 'function' && spec.displayName) {\n                      proto[name].displayName = spec.displayName + '_' + name;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        function mixStaticSpecIntoComponent(Constructor, statics) {\n          if (!statics) {\n            return;\n          }\n          for (var name in statics) {\n            var property = statics[name];\n            if (!statics.hasOwnProperty(name)) {\n              continue;\n            }\n            var isReserved = (name in RESERVED_SPEC_KEYS);\n            _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);\n            var isInherited = (name in Constructor);\n            _invariant(!isInherited, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);\n            Constructor[name] = property;\n          }\n        }\n\n        /**\n         * Merge two objects, but throw if both contain the same key.\n         *\n         * @param {object} one The first object, which is mutated.\n         * @param {object} two The second object\n         * @return {object} one after it has been mutated to contain everything in two.\n         */\n        function mergeIntoWithNoDuplicateKeys(one, two) {\n          _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');\n          for (var key in two) {\n            if (two.hasOwnProperty(key)) {\n              _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);\n              one[key] = two[key];\n            }\n          }\n          return one;\n        }\n\n        /**\n         * Creates a function that invokes two functions and merges their return values.\n         *\n         * @param {function} one Function to invoke first.\n         * @param {function} two Function to invoke second.\n         * @return {function} Function that invokes the two argument functions.\n         * @private\n         */\n        function createMergedResultFunction(one, two) {\n          return function mergedResult() {\n            var a = one.apply(this, arguments);\n            var b = two.apply(this, arguments);\n            if (a == null) {\n              return b;\n            } else if (b == null) {\n              return a;\n            }\n            var c = {};\n            mergeIntoWithNoDuplicateKeys(c, a);\n            mergeIntoWithNoDuplicateKeys(c, b);\n            return c;\n          };\n        }\n\n        /**\n         * Creates a function that invokes two functions and ignores their return vales.\n         *\n         * @param {function} one Function to invoke first.\n         * @param {function} two Function to invoke second.\n         * @return {function} Function that invokes the two argument functions.\n         * @private\n         */\n        function createChainedFunction(one, two) {\n          return function chainedFunction() {\n            one.apply(this, arguments);\n            two.apply(this, arguments);\n          };\n        }\n\n        /**\n         * Binds a method to the component.\n         *\n         * @param {object} component Component whose method is going to be bound.\n         * @param {function} method Method to be bound.\n         * @return {function} The bound method.\n         */\n        function bindAutoBindMethod(component, method) {\n          var boundMethod = method.bind(component);\n          if (process.env.NODE_ENV !== 'production') {\n            boundMethod.__reactBoundContext = component;\n            boundMethod.__reactBoundMethod = method;\n            boundMethod.__reactBoundArguments = null;\n            var componentName = component.constructor.displayName;\n            var _bind = boundMethod.bind;\n            boundMethod.bind = function (newThis) {\n              for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = arguments[_key];\n              }\n\n              // User is trying to bind() an autobound method; we effectively will\n              // ignore the value of \"this\" that the user is trying to use, so\n              // let's warn.\n              if (newThis !== component && newThis !== null) {\n                if (process.env.NODE_ENV !== 'production') {\n                  warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);\n                }\n              } else if (!args.length) {\n                if (process.env.NODE_ENV !== 'production') {\n                  warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);\n                }\n                return boundMethod;\n              }\n              var reboundMethod = _bind.apply(boundMethod, arguments);\n              reboundMethod.__reactBoundContext = component;\n              reboundMethod.__reactBoundMethod = method;\n              reboundMethod.__reactBoundArguments = args;\n              return reboundMethod;\n            };\n          }\n          return boundMethod;\n        }\n\n        /**\n         * Binds all auto-bound methods in a component.\n         *\n         * @param {object} component Component whose method is going to be bound.\n         */\n        function bindAutoBindMethods(component) {\n          var pairs = component.__reactAutoBindPairs;\n          for (var i = 0; i < pairs.length; i += 2) {\n            var autoBindKey = pairs[i];\n            var method = pairs[i + 1];\n            component[autoBindKey] = bindAutoBindMethod(component, method);\n          }\n        }\n        var IsMountedPreMixin = {\n          componentDidMount: function componentDidMount() {\n            this.__isMounted = true;\n          }\n        };\n        var IsMountedPostMixin = {\n          componentWillUnmount: function componentWillUnmount() {\n            this.__isMounted = false;\n          }\n        };\n\n        /**\n         * Add more to the ReactClass base class. These are all legacy features and\n         * therefore not already part of the modern ReactComponent.\n         */\n        var ReactClassMixin = {\n          /**\n           * TODO: This will be deprecated because state should always keep a consistent\n           * type signature and the only use case for this, is to avoid that.\n           */\n          replaceState: function replaceState(newState, callback) {\n            this.updater.enqueueReplaceState(this, newState, callback);\n          },\n          /**\n           * Checks whether or not this composite component is mounted.\n           * @return {boolean} True if mounted, false otherwise.\n           * @protected\n           * @final\n           */\n          isMounted: function isMounted() {\n            if (process.env.NODE_ENV !== 'production') {\n              warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');\n              this.__didWarnIsMounted = true;\n            }\n            return !!this.__isMounted;\n          }\n        };\n        var ReactClassComponent = function ReactClassComponent() {};\n        _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n\n        /**\n         * Creates a composite component class given a class specification.\n         * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n         *\n         * @param {object} spec Class specification (which must define `render`).\n         * @return {function} Component constructor function.\n         * @public\n         */\n        function createClass(spec) {\n          // To keep our warnings more understandable, we'll use a little hack here to\n          // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n          // unnecessarily identify a class without displayName as 'Constructor'.\n          var Constructor = identity(function (props, context, updater) {\n            // This constructor gets overridden by mocks. The argument is used\n            // by mocks to assert on what gets mounted.\n\n            if (process.env.NODE_ENV !== 'production') {\n              warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');\n            }\n\n            // Wire up auto-binding\n            if (this.__reactAutoBindPairs.length) {\n              bindAutoBindMethods(this);\n            }\n            this.props = props;\n            this.context = context;\n            this.refs = emptyObject;\n            this.updater = updater || ReactNoopUpdateQueue;\n            this.state = null;\n\n            // ReactClasses doesn't have constructors. Instead, they use the\n            // getInitialState and componentWillMount methods for initialization.\n\n            var initialState = this.getInitialState ? this.getInitialState() : null;\n            if (process.env.NODE_ENV !== 'production') {\n              // We allow auto-mocks to proceed as if they're returning null.\n              if (initialState === undefined && this.getInitialState._isMockFunction) {\n                // This is probably bad practice. Consider warning here and\n                // deprecating this convenience.\n                initialState = null;\n              }\n            }\n            _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');\n            this.state = initialState;\n          });\n          Constructor.prototype = new ReactClassComponent();\n          Constructor.prototype.constructor = Constructor;\n          Constructor.prototype.__reactAutoBindPairs = [];\n          injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n          mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n          mixSpecIntoComponent(Constructor, spec);\n          mixSpecIntoComponent(Constructor, IsMountedPostMixin);\n\n          // Initialize the defaultProps property after all mixins have been merged.\n          if (Constructor.getDefaultProps) {\n            Constructor.defaultProps = Constructor.getDefaultProps();\n          }\n          if (process.env.NODE_ENV !== 'production') {\n            // This is a tag to indicate that the use of these method names is ok,\n            // since it's used with createClass. If it's not, then it's likely a\n            // mistake so we'll warn you to use the static property, property\n            // initializer or constructor respectively.\n            if (Constructor.getDefaultProps) {\n              Constructor.getDefaultProps.isReactClassApproved = {};\n            }\n            if (Constructor.prototype.getInitialState) {\n              Constructor.prototype.getInitialState.isReactClassApproved = {};\n            }\n          }\n          _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');\n          if (process.env.NODE_ENV !== 'production') {\n            warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');\n            warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');\n          }\n\n          // Reduce time spent doing lookups by setting these on the prototype.\n          for (var methodName in ReactClassInterface) {\n            if (!Constructor.prototype[methodName]) {\n              Constructor.prototype[methodName] = null;\n            }\n          }\n          return Constructor;\n        }\n        return createClass;\n      }\n      module.exports = factory;\n\n      /***/\n    }, /* 4 */\n    /***/function (module, exports) {\n      /*\n      object-assign\n      (c) Sindre Sorhus\n      @license MIT\n      */\n\n      'use strict';\n\n      /* eslint-disable no-unused-vars */\n      var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n      function toObject(val) {\n        if (val === null || val === undefined) {\n          throw new TypeError('Object.assign cannot be called with null or undefined');\n        }\n        return Object(val);\n      }\n      function shouldUseNative() {\n        try {\n          if (!Object.assign) {\n            return false;\n          }\n\n          // Detect buggy property enumeration order in older V8 versions.\n\n          // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n          var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n          test1[5] = 'de';\n          if (Object.getOwnPropertyNames(test1)[0] === '5') {\n            return false;\n          }\n\n          // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n          var test2 = {};\n          for (var i = 0; i < 10; i++) {\n            test2['_' + String.fromCharCode(i)] = i;\n          }\n          var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n            return test2[n];\n          });\n          if (order2.join('') !== '0123456789') {\n            return false;\n          }\n\n          // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n          var test3 = {};\n          'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n            test3[letter] = letter;\n          });\n          if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n            return false;\n          }\n          return true;\n        } catch (err) {\n          // We don't expect any of the above to throw, but better to be safe.\n          return false;\n        }\n      }\n      module.exports = shouldUseNative() ? Object.assign : function (target, source) {\n        var from;\n        var to = toObject(target);\n        var symbols;\n        for (var s = 1; s < arguments.length; s++) {\n          from = Object(arguments[s]);\n          for (var key in from) {\n            if (hasOwnProperty.call(from, key)) {\n              to[key] = from[key];\n            }\n          }\n          if (getOwnPropertySymbols) {\n            symbols = getOwnPropertySymbols(from);\n            for (var i = 0; i < symbols.length; i++) {\n              if (propIsEnumerable.call(from, symbols[i])) {\n                to[symbols[i]] = from[symbols[i]];\n              }\n            }\n          }\n        }\n        return to;\n      };\n\n      /***/\n    }, /* 5 */\n    /***/function (module, exports) {\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       * All rights reserved.\n       *\n       * This source code is licensed under the BSD-style license found in the\n       * LICENSE file in the root directory of this source tree. An additional grant\n       * of patent rights can be found in the PATENTS file in the same directory.\n       *\n       */\n\n      'use strict';\n\n      var emptyObject = {};\n      if (process.env.NODE_ENV !== 'production') {\n        Object.freeze(emptyObject);\n      }\n      module.exports = emptyObject;\n\n      /***/\n    }, /* 6 */\n    /***/function (module, exports) {\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       * All rights reserved.\n       *\n       * This source code is licensed under the BSD-style license found in the\n       * LICENSE file in the root directory of this source tree. An additional grant\n       * of patent rights can be found in the PATENTS file in the same directory.\n       *\n       */\n\n      'use strict';\n\n      /**\n       * Use invariant() to assert state which your program assumes to be true.\n       *\n       * Provide sprintf-style format (only %s is supported) and arguments\n       * to provide information about what broke and what you were\n       * expecting.\n       *\n       * The invariant message will be stripped in production, but the invariant\n       * will remain to ensure logic does not differ in production.\n       */\n      var validateFormat = function validateFormat(format) {};\n      if (process.env.NODE_ENV !== 'production') {\n        validateFormat = function validateFormat(format) {\n          if (format === undefined) {\n            throw new Error('invariant requires an error message argument');\n          }\n        };\n      }\n      function invariant(condition, format, a, b, c, d, e, f) {\n        validateFormat(format);\n        if (!condition) {\n          var error;\n          if (format === undefined) {\n            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n          } else {\n            var args = [a, b, c, d, e, f];\n            var argIndex = 0;\n            error = new Error(format.replace(/%s/g, function () {\n              return args[argIndex++];\n            }));\n            error.name = 'Invariant Violation';\n          }\n          error.framesToPop = 1; // we don't care about invariant's own frame\n          throw error;\n        }\n      }\n      module.exports = invariant;\n\n      /***/\n    }, /* 7 */\n    /***/function (module, exports, __webpack_require__) {\n      /**\n       * Copyright 2014-2015, Facebook, Inc.\n       * All rights reserved.\n       *\n       * This source code is licensed under the BSD-style license found in the\n       * LICENSE file in the root directory of this source tree. An additional grant\n       * of patent rights can be found in the PATENTS file in the same directory.\n       *\n       */\n\n      'use strict';\n\n      var emptyFunction = __webpack_require__(8);\n\n      /**\n       * Similar to invariant but only logs a warning if the condition is not met.\n       * This can be used to log issues in development environments in critical\n       * paths. Removing the logging code for production environments will keep the\n       * same logic and follow the same code paths.\n       */\n\n      var warning = emptyFunction;\n      if (process.env.NODE_ENV !== 'production') {\n        var printWarning = function printWarning(format) {\n          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n          var argIndex = 0;\n          var message = 'Warning: ' + format.replace(/%s/g, function () {\n            return args[argIndex++];\n          });\n          if (typeof console !== 'undefined') {\n            console.error(message);\n          }\n          try {\n            // --- Welcome to debugging React ---\n            // This error was thrown as a convenience so that you can use this stack\n            // to find the callsite that caused this warning to fire.\n            throw new Error(message);\n          } catch (x) {}\n        };\n        warning = function warning(condition, format) {\n          if (format === undefined) {\n            throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n          }\n          if (format.indexOf('Failed Composite propType: ') === 0) {\n            return; // Ignore CompositeComponent proptype check.\n          }\n\n          if (!condition) {\n            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n              args[_key2 - 2] = arguments[_key2];\n            }\n            printWarning.apply(undefined, [format].concat(args));\n          }\n        };\n      }\n      module.exports = warning;\n\n      /***/\n    }, /* 8 */\n    /***/function (module, exports) {\n      \"use strict\";\n\n      /**\n       * Copyright (c) 2013-present, Facebook, Inc.\n       * All rights reserved.\n       *\n       * This source code is licensed under the BSD-style license found in the\n       * LICENSE file in the root directory of this source tree. An additional grant\n       * of patent rights can be found in the PATENTS file in the same directory.\n       *\n       * \n       */\n      function makeEmptyFunction(arg) {\n        return function () {\n          return arg;\n        };\n      }\n\n      /**\n       * This function accepts and discards inputs; it has no side effects. This is\n       * primarily useful idiomatically for overridable function endpoints which\n       * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n       */\n      var emptyFunction = function emptyFunction() {};\n      emptyFunction.thatReturns = makeEmptyFunction;\n      emptyFunction.thatReturnsFalse = makeEmptyFunction(false);\n      emptyFunction.thatReturnsTrue = makeEmptyFunction(true);\n      emptyFunction.thatReturnsNull = makeEmptyFunction(null);\n      emptyFunction.thatReturnsThis = function () {\n        return this;\n      };\n      emptyFunction.thatReturnsArgument = function (arg) {\n        return arg;\n      };\n      module.exports = emptyFunction;\n\n      /***/\n    }, /* 9 */\n    /***/function (module, exports) {\n      'use strict';\n\n      var NumeralFormatter = function NumeralFormatter(numeralDecimalMark, numeralIntegerScale, numeralDecimalScale, numeralThousandsGroupStyle, numeralPositiveOnly, stripLeadingZeroes, delimiter) {\n        var owner = this;\n        owner.numeralDecimalMark = numeralDecimalMark || '.';\n        owner.numeralIntegerScale = numeralIntegerScale > 0 ? numeralIntegerScale : 0;\n        owner.numeralDecimalScale = numeralDecimalScale >= 0 ? numeralDecimalScale : 2;\n        owner.numeralThousandsGroupStyle = numeralThousandsGroupStyle || NumeralFormatter.groupStyle.thousand;\n        owner.numeralPositiveOnly = !!numeralPositiveOnly;\n        owner.stripLeadingZeroes = stripLeadingZeroes !== false;\n        owner.delimiter = delimiter || delimiter === '' ? delimiter : ',';\n        owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n      };\n      NumeralFormatter.groupStyle = {\n        thousand: 'thousand',\n        lakh: 'lakh',\n        wan: 'wan',\n        none: 'none'\n      };\n      NumeralFormatter.prototype = {\n        getRawValue: function getRawValue(value) {\n          return value.replace(this.delimiterRE, '').replace(this.numeralDecimalMark, '.');\n        },\n        format: function format(value) {\n          var owner = this,\n            parts,\n            partInteger,\n            partDecimal = '';\n\n          // strip alphabet letters\n          value = value.replace(/[A-Za-z]/g, '')\n          // replace the first decimal mark with reserved placeholder\n          .replace(owner.numeralDecimalMark, 'M')\n\n          // strip non numeric letters except minus and \"M\"\n          // this is to ensure prefix has been stripped\n          .replace(/[^\\dM-]/g, '')\n\n          // replace the leading minus with reserved placeholder\n          .replace(/^\\-/, 'N')\n\n          // strip the other minus sign (if present)\n          .replace(/\\-/g, '')\n\n          // replace the minus sign (if present)\n          .replace('N', owner.numeralPositiveOnly ? '' : '-')\n\n          // replace decimal mark\n          .replace('M', owner.numeralDecimalMark);\n\n          // strip any leading zeros\n          if (owner.stripLeadingZeroes) {\n            value = value.replace(/^(-)?0+(?=\\d)/, '$1');\n          }\n          partInteger = value;\n          if (value.indexOf(owner.numeralDecimalMark) >= 0) {\n            parts = value.split(owner.numeralDecimalMark);\n            partInteger = parts[0];\n            partDecimal = owner.numeralDecimalMark + parts[1].slice(0, owner.numeralDecimalScale);\n          }\n          if (owner.numeralIntegerScale > 0) {\n            partInteger = partInteger.slice(0, owner.numeralIntegerScale + (value.slice(0, 1) === '-' ? 1 : 0));\n          }\n          switch (owner.numeralThousandsGroupStyle) {\n            case NumeralFormatter.groupStyle.lakh:\n              partInteger = partInteger.replace(/(\\d)(?=(\\d\\d)+\\d$)/g, '$1' + owner.delimiter);\n              break;\n            case NumeralFormatter.groupStyle.wan:\n              partInteger = partInteger.replace(/(\\d)(?=(\\d{4})+$)/g, '$1' + owner.delimiter);\n              break;\n            case NumeralFormatter.groupStyle.thousand:\n              partInteger = partInteger.replace(/(\\d)(?=(\\d{3})+$)/g, '$1' + owner.delimiter);\n              break;\n          }\n          return partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '');\n        }\n      };\n      module.exports = NumeralFormatter;\n\n      /***/\n    }, /* 10 */\n    /***/function (module, exports) {\n      'use strict';\n\n      var DateFormatter = function DateFormatter(datePattern) {\n        var owner = this;\n        owner.date = [];\n        owner.blocks = [];\n        owner.datePattern = datePattern;\n        owner.initBlocks();\n      };\n      DateFormatter.prototype = {\n        initBlocks: function initBlocks() {\n          var owner = this;\n          owner.datePattern.forEach(function (value) {\n            if (value === 'Y') {\n              owner.blocks.push(4);\n            } else {\n              owner.blocks.push(2);\n            }\n          });\n        },\n        getISOFormatDate: function getISOFormatDate() {\n          var owner = this,\n            date = owner.date;\n          return date[2] ? date[2] + '-' + owner.addLeadingZero(date[1]) + '-' + owner.addLeadingZero(date[0]) : '';\n        },\n        getBlocks: function getBlocks() {\n          return this.blocks;\n        },\n        getValidatedDate: function getValidatedDate(value) {\n          var owner = this,\n            result = '';\n          value = value.replace(/[^\\d]/g, '');\n          owner.blocks.forEach(function (length, index) {\n            if (value.length > 0) {\n              var sub = value.slice(0, length),\n                sub0 = sub.slice(0, 1),\n                rest = value.slice(length);\n              switch (owner.datePattern[index]) {\n                case 'd':\n                  if (sub === '00') {\n                    sub = '01';\n                  } else if (parseInt(sub0, 10) > 3) {\n                    sub = '0' + sub0;\n                  } else if (parseInt(sub, 10) > 31) {\n                    sub = '31';\n                  }\n                  break;\n                case 'm':\n                  if (sub === '00') {\n                    sub = '01';\n                  } else if (parseInt(sub0, 10) > 1) {\n                    sub = '0' + sub0;\n                  } else if (parseInt(sub, 10) > 12) {\n                    sub = '12';\n                  }\n                  break;\n              }\n              result += sub;\n\n              // update remaining string\n              value = rest;\n            }\n          });\n          return this.getFixedDateString(result);\n        },\n        getFixedDateString: function getFixedDateString(value) {\n          var owner = this,\n            datePattern = owner.datePattern,\n            date = [],\n            dayIndex = 0,\n            monthIndex = 0,\n            yearIndex = 0,\n            dayStartIndex = 0,\n            monthStartIndex = 0,\n            yearStartIndex = 0,\n            day,\n            month,\n            year,\n            fullYearDone = false;\n\n          // mm-dd || dd-mm\n          if (value.length === 4 && datePattern[0].toLowerCase() !== 'y' && datePattern[1].toLowerCase() !== 'y') {\n            dayStartIndex = datePattern[0] === 'd' ? 0 : 2;\n            monthStartIndex = 2 - dayStartIndex;\n            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n            date = this.getFixedDate(day, month, 0);\n          }\n\n          // yyyy-mm-dd || yyyy-dd-mm || mm-dd-yyyy || dd-mm-yyyy || dd-yyyy-mm || mm-yyyy-dd\n          if (value.length === 8) {\n            datePattern.forEach(function (type, index) {\n              switch (type) {\n                case 'd':\n                  dayIndex = index;\n                  break;\n                case 'm':\n                  monthIndex = index;\n                  break;\n                default:\n                  yearIndex = index;\n                  break;\n              }\n            });\n            yearStartIndex = yearIndex * 2;\n            dayStartIndex = dayIndex <= yearIndex ? dayIndex * 2 : dayIndex * 2 + 2;\n            monthStartIndex = monthIndex <= yearIndex ? monthIndex * 2 : monthIndex * 2 + 2;\n            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);\n            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;\n            date = this.getFixedDate(day, month, year);\n          }\n          owner.date = date;\n          return date.length === 0 ? value : datePattern.reduce(function (previous, current) {\n            switch (current) {\n              case 'd':\n                return previous + owner.addLeadingZero(date[0]);\n              case 'm':\n                return previous + owner.addLeadingZero(date[1]);\n              default:\n                return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2]) : '');\n            }\n          }, '');\n        },\n        getFixedDate: function getFixedDate(day, month, year) {\n          day = Math.min(day, 31);\n          month = Math.min(month, 12);\n          year = parseInt(year || 0, 10);\n          if (month < 7 && month % 2 === 0 || month > 8 && month % 2 === 1) {\n            day = Math.min(day, month === 2 ? this.isLeapYear(year) ? 29 : 28 : 30);\n          }\n          return [day, month, year];\n        },\n        isLeapYear: function isLeapYear(year) {\n          return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n        },\n        addLeadingZero: function addLeadingZero(number) {\n          return (number < 10 ? '0' : '') + number;\n        },\n        addLeadingZeroForYear: function addLeadingZeroForYear(number) {\n          return (number < 10 ? '000' : number < 100 ? '00' : number < 1000 ? '0' : '') + number;\n        }\n      };\n      module.exports = DateFormatter;\n\n      /***/\n    }, /* 11 */\n    /***/function (module, exports) {\n      'use strict';\n\n      var TimeFormatter = function TimeFormatter(timePattern, timeFormat) {\n        var owner = this;\n        owner.time = [];\n        owner.blocks = [];\n        owner.timePattern = timePattern;\n        owner.timeFormat = timeFormat;\n        owner.initBlocks();\n      };\n      TimeFormatter.prototype = {\n        initBlocks: function initBlocks() {\n          var owner = this;\n          owner.timePattern.forEach(function () {\n            owner.blocks.push(2);\n          });\n        },\n        getISOFormatTime: function getISOFormatTime() {\n          var owner = this,\n            time = owner.time;\n          return time[2] ? owner.addLeadingZero(time[0]) + ':' + owner.addLeadingZero(time[1]) + ':' + owner.addLeadingZero(time[2]) : '';\n        },\n        getBlocks: function getBlocks() {\n          return this.blocks;\n        },\n        getTimeFormatOptions: function getTimeFormatOptions() {\n          var owner = this;\n          if (String(owner.timeFormat) === '12') {\n            return {\n              maxHourFirstDigit: 1,\n              maxHours: 12,\n              maxMinutesFirstDigit: 5,\n              maxMinutes: 60\n            };\n          }\n          return {\n            maxHourFirstDigit: 2,\n            maxHours: 23,\n            maxMinutesFirstDigit: 5,\n            maxMinutes: 60\n          };\n        },\n        getValidatedTime: function getValidatedTime(value) {\n          var owner = this,\n            result = '';\n          value = value.replace(/[^\\d]/g, '');\n          var timeFormatOptions = owner.getTimeFormatOptions();\n          owner.blocks.forEach(function (length, index) {\n            if (value.length > 0) {\n              var sub = value.slice(0, length),\n                sub0 = sub.slice(0, 1),\n                rest = value.slice(length);\n              switch (owner.timePattern[index]) {\n                case 'h':\n                  if (parseInt(sub0, 10) > timeFormatOptions.maxHourFirstDigit) {\n                    sub = '0' + sub0;\n                  } else if (parseInt(sub, 10) > timeFormatOptions.maxHours) {\n                    sub = timeFormatOptions.maxHours + '';\n                  }\n                  break;\n                case 'm':\n                case 's':\n                  if (parseInt(sub0, 10) > timeFormatOptions.maxMinutesFirstDigit) {\n                    sub = '0' + sub0;\n                  } else if (parseInt(sub, 10) > timeFormatOptions.maxMinutes) {\n                    sub = timeFormatOptions.maxMinutes + '';\n                  }\n                  break;\n              }\n              result += sub;\n\n              // update remaining string\n              value = rest;\n            }\n          });\n          return this.getFixedTimeString(result);\n        },\n        getFixedTimeString: function getFixedTimeString(value) {\n          var owner = this,\n            timePattern = owner.timePattern,\n            time = [],\n            secondIndex = 0,\n            minuteIndex = 0,\n            hourIndex = 0,\n            secondStartIndex = 0,\n            minuteStartIndex = 0,\n            hourStartIndex = 0,\n            second,\n            minute,\n            hour;\n          if (value.length === 6) {\n            timePattern.forEach(function (type, index) {\n              switch (type) {\n                case 's':\n                  secondIndex = index * 2;\n                  break;\n                case 'm':\n                  minuteIndex = index * 2;\n                  break;\n                case 'h':\n                  hourIndex = index * 2;\n                  break;\n              }\n            });\n            hourStartIndex = hourIndex;\n            minuteStartIndex = minuteIndex;\n            secondStartIndex = secondIndex;\n            second = parseInt(value.slice(secondStartIndex, secondStartIndex + 2), 10);\n            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);\n            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);\n            time = this.getFixedTime(hour, minute, second);\n          }\n          if (value.length === 4 && owner.timePattern.indexOf('s') < 0) {\n            timePattern.forEach(function (type, index) {\n              switch (type) {\n                case 'm':\n                  minuteIndex = index * 2;\n                  break;\n                case 'h':\n                  hourIndex = index * 2;\n                  break;\n              }\n            });\n            hourStartIndex = hourIndex;\n            minuteStartIndex = minuteIndex;\n            second = 0;\n            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);\n            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);\n            time = this.getFixedTime(hour, minute, second);\n          }\n          owner.time = time;\n          return time.length === 0 ? value : timePattern.reduce(function (previous, current) {\n            switch (current) {\n              case 's':\n                return previous + owner.addLeadingZero(time[2]);\n              case 'm':\n                return previous + owner.addLeadingZero(time[1]);\n              case 'h':\n                return previous + owner.addLeadingZero(time[0]);\n            }\n          }, '');\n        },\n        getFixedTime: function getFixedTime(hour, minute, second) {\n          second = Math.min(parseInt(second || 0, 10), 60);\n          minute = Math.min(minute, 60);\n          hour = Math.min(hour, 60);\n          return [hour, minute, second];\n        },\n        addLeadingZero: function addLeadingZero(number) {\n          return (number < 10 ? '0' : '') + number;\n        }\n      };\n      module.exports = TimeFormatter;\n\n      /***/\n    }, /* 12 */\n    /***/function (module, exports) {\n      'use strict';\n\n      var PhoneFormatter = function PhoneFormatter(formatter, delimiter) {\n        var owner = this;\n        owner.delimiter = delimiter || delimiter === '' ? delimiter : ' ';\n        owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n        owner.formatter = formatter;\n      };\n      PhoneFormatter.prototype = {\n        setFormatter: function setFormatter(formatter) {\n          this.formatter = formatter;\n        },\n        format: function format(phoneNumber) {\n          var owner = this;\n          owner.formatter.clear();\n\n          // only keep number and +\n          phoneNumber = phoneNumber.replace(/[^\\d+]/g, '');\n\n          // strip non-leading +\n          phoneNumber = phoneNumber.replace(/^\\+/, 'B').replace(/\\+/g, '').replace('B', '+');\n\n          // strip delimiter\n          phoneNumber = phoneNumber.replace(owner.delimiterRE, '');\n          var result = '',\n            current,\n            validated = false;\n          for (var i = 0, iMax = phoneNumber.length; i < iMax; i++) {\n            current = owner.formatter.inputDigit(phoneNumber.charAt(i));\n\n            // has ()- or space inside\n            if (/[\\s()-]/g.test(current)) {\n              result = current;\n              validated = true;\n            } else {\n              if (!validated) {\n                result = current;\n              }\n              // else: over length input\n              // it turns to invalid number again\n            }\n          }\n\n          // strip ()\n          // e.g. US: 7161234567 returns (716) 123-4567\n          result = result.replace(/[()]/g, '');\n          // replace library delimiter with user customized delimiter\n          result = result.replace(/[\\s-]/g, owner.delimiter);\n          return result;\n        }\n      };\n      module.exports = PhoneFormatter;\n\n      /***/\n    }, /* 13 */\n    /***/function (module, exports) {\n      'use strict';\n\n      var CreditCardDetector = {\n        blocks: {\n          uatp: [4, 5, 6],\n          amex: [4, 6, 5],\n          diners: [4, 6, 4],\n          discover: [4, 4, 4, 4],\n          mastercard: [4, 4, 4, 4],\n          dankort: [4, 4, 4, 4],\n          instapayment: [4, 4, 4, 4],\n          jcb15: [4, 6, 5],\n          jcb: [4, 4, 4, 4],\n          maestro: [4, 4, 4, 4],\n          visa: [4, 4, 4, 4],\n          mir: [4, 4, 4, 4],\n          unionPay: [4, 4, 4, 4],\n          general: [4, 4, 4, 4],\n          generalStrict: [4, 4, 4, 7]\n        },\n        re: {\n          // starts with 1; 15 digits, not starts with 1800 (jcb card)\n          uatp: /^(?!1800)1\\d{0,14}/,\n          // starts with 34/37; 15 digits\n          amex: /^3[47]\\d{0,13}/,\n          // starts with 6011/65/644-649; 16 digits\n          discover: /^(?:6011|65\\d{0,2}|64[4-9]\\d?)\\d{0,12}/,\n          // starts with 300-305/309 or 36/38/39; 14 digits\n          diners: /^3(?:0([0-5]|9)|[689]\\d?)\\d{0,11}/,\n          // starts with 51-55/2221–2720; 16 digits\n          mastercard: /^(5[1-5]\\d{0,2}|22[2-9]\\d{0,1}|2[3-7]\\d{0,2})\\d{0,12}/,\n          // starts with 5019/4175/4571; 16 digits\n          dankort: /^(5019|4175|4571)\\d{0,12}/,\n          // starts with 637-639; 16 digits\n          instapayment: /^63[7-9]\\d{0,13}/,\n          // starts with 2131/1800; 15 digits\n          jcb15: /^(?:2131|1800)\\d{0,11}/,\n          // starts with 2131/1800/35; 16 digits\n          jcb: /^(?:35\\d{0,2})\\d{0,12}/,\n          // starts with 50/56-58/6304/67; 16 digits\n          maestro: /^(?:5[0678]\\d{0,2}|6304|67\\d{0,2})\\d{0,12}/,\n          // starts with 22; 16 digits\n          mir: /^220[0-4]\\d{0,12}/,\n          // starts with 4; 16 digits\n          visa: /^4\\d{0,15}/,\n          // starts with 62; 16 digits\n          unionPay: /^62\\d{0,14}/\n        },\n        getInfo: function getInfo(value, strictMode) {\n          var blocks = CreditCardDetector.blocks,\n            re = CreditCardDetector.re;\n\n          // Some credit card can have up to 19 digits number.\n          // Set strictMode to true will remove the 16 max-length restrain,\n          // however, I never found any website validate card number like\n          // this, hence probably you don't want to enable this option.\n          strictMode = !!strictMode;\n          for (var key in re) {\n            if (re[key].test(value)) {\n              var block;\n              if (strictMode) {\n                block = blocks.generalStrict;\n              } else {\n                block = blocks[key];\n              }\n              return {\n                type: key,\n                blocks: block\n              };\n            }\n          }\n          return {\n            type: 'unknown',\n            blocks: strictMode ? blocks.generalStrict : blocks.general\n          };\n        }\n      };\n      module.exports = CreditCardDetector;\n\n      /***/\n    }, /* 14 */\n    /***/function (module, exports) {\n      'use strict';\n\n      var Util = {\n        noop: function noop() {},\n        strip: function strip(value, re) {\n          return value.replace(re, '');\n        },\n        getPostDelimiter: function getPostDelimiter(value, delimiter, delimiters) {\n          // single delimiter\n          if (delimiters.length === 0) {\n            return value.slice(-delimiter.length) === delimiter ? delimiter : '';\n          }\n\n          // multiple delimiters\n          var matchedDelimiter = '';\n          delimiters.forEach(function (current) {\n            if (value.slice(-current.length) === current) {\n              matchedDelimiter = current;\n            }\n          });\n          return matchedDelimiter;\n        },\n        getDelimiterREByDelimiter: function getDelimiterREByDelimiter(delimiter) {\n          return new RegExp(delimiter.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1'), 'g');\n        },\n        getNextCursorPosition: function getNextCursorPosition(prevPos, oldValue, newValue, delimiter, delimiters) {\n          // If cursor was at the end of value, just place it back.\n          // Because new value could contain additional chars.\n          if (oldValue.length === prevPos) {\n            return newValue.length;\n          }\n          return prevPos + this.getPositionOffset(prevPos, oldValue, newValue, delimiter, delimiters);\n        },\n        getPositionOffset: function getPositionOffset(prevPos, oldValue, newValue, delimiter, delimiters) {\n          var oldRawValue, newRawValue, lengthOffset;\n          oldRawValue = this.stripDelimiters(oldValue.slice(0, prevPos), delimiter, delimiters);\n          newRawValue = this.stripDelimiters(newValue.slice(0, prevPos), delimiter, delimiters);\n          lengthOffset = oldRawValue.length - newRawValue.length;\n          return lengthOffset !== 0 ? lengthOffset / Math.abs(lengthOffset) : 0;\n        },\n        stripDelimiters: function stripDelimiters(value, delimiter, delimiters) {\n          var owner = this;\n\n          // single delimiter\n          if (delimiters.length === 0) {\n            var delimiterRE = delimiter ? owner.getDelimiterREByDelimiter(delimiter) : '';\n            return value.replace(delimiterRE, '');\n          }\n\n          // multiple delimiters\n          delimiters.forEach(function (current) {\n            current.split('').forEach(function (letter) {\n              value = value.replace(owner.getDelimiterREByDelimiter(letter), '');\n            });\n          });\n          return value;\n        },\n        headStr: function headStr(str, length) {\n          return str.slice(0, length);\n        },\n        getMaxLength: function getMaxLength(blocks) {\n          return blocks.reduce(function (previous, current) {\n            return previous + current;\n          }, 0);\n        },\n        // strip prefix\n        // Before type  |   After type    |     Return value\n        // PEFIX-...    |   PEFIX-...     |     ''\n        // PREFIX-123   |   PEFIX-123     |     123\n        // PREFIX-123   |   PREFIX-23     |     23\n        // PREFIX-123   |   PREFIX-1234   |     1234\n        getPrefixStrippedValue: function getPrefixStrippedValue(value, prefix, prefixLength, prevResult, delimiter, delimiters) {\n          // No prefix\n          if (prefixLength === 0) {\n            return value;\n          }\n\n          // Pre result has issue\n          // Revert to raw prefix\n          if (prevResult.slice(0, prefixLength) !== prefix) {\n            return '';\n          }\n          var prevValue = this.stripDelimiters(prevResult, delimiter, delimiters);\n\n          // New value has issue, someone typed in between prefix letters\n          // Revert to pre value\n          if (value.slice(0, prefixLength) !== prefix) {\n            return prevValue.slice(prefixLength);\n          }\n\n          // No issue, strip prefix for new value\n          return value.slice(prefixLength);\n        },\n        getFirstDiffIndex: function getFirstDiffIndex(prev, current) {\n          var index = 0;\n          while (prev.charAt(index) === current.charAt(index)) {\n            if (prev.charAt(index++) === '') {\n              return -1;\n            }\n          }\n          return index;\n        },\n        getFormattedValue: function getFormattedValue(value, blocks, blocksLength, delimiter, delimiters, delimiterLazyShow) {\n          var result = '',\n            multipleDelimiters = delimiters.length > 0,\n            currentDelimiter;\n\n          // no options, normal input\n          if (blocksLength === 0) {\n            return value;\n          }\n          blocks.forEach(function (length, index) {\n            if (value.length > 0) {\n              var sub = value.slice(0, length),\n                rest = value.slice(length);\n              if (multipleDelimiters) {\n                currentDelimiter = delimiters[delimiterLazyShow ? index - 1 : index] || currentDelimiter;\n              } else {\n                currentDelimiter = delimiter;\n              }\n              if (delimiterLazyShow) {\n                if (index > 0) {\n                  result += currentDelimiter;\n                }\n                result += sub;\n              } else {\n                result += sub;\n                if (sub.length === length && index < blocksLength - 1) {\n                  result += currentDelimiter;\n                }\n              }\n\n              // update remaining string\n              value = rest;\n            }\n          });\n          return result;\n        },\n        // move cursor to the end\n        // the first time user focuses on an input with prefix\n        fixPrefixCursor: function fixPrefixCursor(el, prefix, delimiter, delimiters) {\n          if (!el) {\n            return;\n          }\n          var val = el.value,\n            appendix = delimiter || delimiters[0] || ' ';\n          if (!el.setSelectionRange || !prefix || prefix.length + appendix.length < val.length) {\n            return;\n          }\n          var len = val.length * 2;\n\n          // set timeout to avoid blink\n          setTimeout(function () {\n            el.setSelectionRange(len, len);\n          }, 1);\n        },\n        setSelection: function setSelection(element, position, doc) {\n          if (element !== this.getActiveElement(doc)) {\n            return;\n          }\n\n          // cursor is already in the end\n          if (element && element.value.length <= position) {\n            return;\n          }\n          if (element.createTextRange) {\n            var range = element.createTextRange();\n            range.move('character', position);\n            range.select();\n          } else {\n            try {\n              element.setSelectionRange(position, position);\n            } catch (e) {\n              // eslint-disable-next-line\n              console.warn('The input element type does not support selection');\n            }\n          }\n        },\n        getActiveElement: function getActiveElement(parent) {\n          var activeElement = parent.activeElement;\n          if (activeElement && activeElement.shadowRoot) {\n            return this.getActiveElement(activeElement.shadowRoot);\n          }\n          return activeElement;\n        },\n        isAndroid: function isAndroid() {\n          return navigator && /android/i.test(navigator.userAgent);\n        },\n        // On Android chrome, the keyup and keydown events\n        // always return key code 229 as a composition that\n        // buffers the user’s keystrokes\n        // see https://github.com/nosir/cleave.js/issues/147\n        isAndroidBackspaceKeydown: function isAndroidBackspaceKeydown(lastInputValue, currentInputValue) {\n          if (!this.isAndroid() || !lastInputValue || !currentInputValue) {\n            return false;\n          }\n          return currentInputValue === lastInputValue.slice(0, -1);\n        }\n      };\n      module.exports = Util;\n\n      /***/\n    }, /* 15 */\n    /***/function (module, exports) {\n      'use strict';\n\n      /**\n       * Props Assignment\n       *\n       * Separate this, so react module can share the usage\n       */\n      var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n      var DefaultProperties = {\n        // Maybe change to object-assign\n        // for now just keep it as simple\n        assign: function assign(target, opts) {\n          target = target || {};\n          opts = opts || {};\n\n          // credit card\n          target.creditCard = !!opts.creditCard;\n          target.creditCardStrictMode = !!opts.creditCardStrictMode;\n          target.creditCardType = '';\n          target.onCreditCardTypeChanged = opts.onCreditCardTypeChanged || function () {};\n\n          // phone\n          target.phone = !!opts.phone;\n          target.phoneRegionCode = opts.phoneRegionCode || 'AU';\n          target.phoneFormatter = {};\n\n          // time\n          target.time = !!opts.time;\n          target.timePattern = opts.timePattern || ['h', 'm', 's'];\n          target.timeFormat = opts.timeFormat || '24';\n          target.timeFormatter = {};\n\n          // date\n          target.date = !!opts.date;\n          target.datePattern = opts.datePattern || ['d', 'm', 'Y'];\n          target.dateFormatter = {};\n\n          // numeral\n          target.numeral = !!opts.numeral;\n          target.numeralIntegerScale = opts.numeralIntegerScale > 0 ? opts.numeralIntegerScale : 0;\n          target.numeralDecimalScale = opts.numeralDecimalScale >= 0 ? opts.numeralDecimalScale : 2;\n          target.numeralDecimalMark = opts.numeralDecimalMark || '.';\n          target.numeralThousandsGroupStyle = opts.numeralThousandsGroupStyle || 'thousand';\n          target.numeralPositiveOnly = !!opts.numeralPositiveOnly;\n          target.stripLeadingZeroes = opts.stripLeadingZeroes !== false;\n\n          // others\n          target.numericOnly = target.creditCard || target.date || !!opts.numericOnly;\n          target.uppercase = !!opts.uppercase;\n          target.lowercase = !!opts.lowercase;\n          target.prefix = target.creditCard || target.date ? '' : opts.prefix || '';\n          target.noImmediatePrefix = !!opts.noImmediatePrefix;\n          target.prefixLength = target.prefix.length;\n          target.rawValueTrimPrefix = !!opts.rawValueTrimPrefix;\n          target.copyDelimiter = !!opts.copyDelimiter;\n          target.initValue = opts.initValue !== undefined && opts.initValue !== null ? opts.initValue.toString() : '';\n          target.delimiter = opts.delimiter || opts.delimiter === '' ? opts.delimiter : opts.date ? '/' : opts.time ? ':' : opts.numeral ? ',' : opts.phone ? ' ' : ' ';\n          target.delimiterLength = target.delimiter.length;\n          target.delimiterLazyShow = !!opts.delimiterLazyShow;\n          target.delimiters = opts.delimiters || [];\n          target.blocks = opts.blocks || [];\n          target.blocksLength = target.blocks.length;\n          target.root = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && global ? global : window;\n          target.document = opts.document || target.root.document;\n          target.maxLength = 0;\n          target.backspace = false;\n          target.result = '';\n          target.onValueChanged = opts.onValueChanged || function () {};\n          return target;\n        }\n      };\n      module.exports = DefaultProperties;\n\n      /***/\n    }\n    /******/])\n  );\n});\n\n;","map":null,"metadata":{},"sourceType":"script"}