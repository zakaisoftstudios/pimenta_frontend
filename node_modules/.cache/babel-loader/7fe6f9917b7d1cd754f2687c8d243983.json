{"ast":null,"code":"var Symbol = require('./_Symbol'),\n  copyArray = require('./_copyArray'),\n  getTag = require('./_getTag'),\n  isArrayLike = require('./isArrayLike'),\n  isString = require('./isString'),\n  iteratorToArray = require('./_iteratorToArray'),\n  mapToArray = require('./_mapToArray'),\n  setToArray = require('./_setToArray'),\n  stringToArray = require('./_stringToArray'),\n  values = require('./values');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n  setTag = '[object Set]';\n\n/** Built-in value references. */\nvar symIterator = Symbol ? Symbol.iterator : undefined;\n\n/**\n * Converts `value` to an array.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Array} Returns the converted array.\n * @example\n *\n * _.toArray({ 'a': 1, 'b': 2 });\n * // => [1, 2]\n *\n * _.toArray('abc');\n * // => ['a', 'b', 'c']\n *\n * _.toArray(1);\n * // => []\n *\n * _.toArray(null);\n * // => []\n */\nfunction toArray(value) {\n  if (!value) {\n    return [];\n  }\n  if (isArrayLike(value)) {\n    return isString(value) ? stringToArray(value) : copyArray(value);\n  }\n  if (symIterator && value[symIterator]) {\n    return iteratorToArray(value[symIterator]());\n  }\n  var tag = getTag(value),\n    func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;\n  return func(value);\n}\nmodule.exports = toArray;","map":null,"metadata":{},"sourceType":"script"}