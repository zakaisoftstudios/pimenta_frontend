{"ast":null,"code":"var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar String = require('./String');\nvar Function = require('./Function');\nvar isBoolean = require('./isBoolean');\nvar isObject = require('./isObject');\nvar isNil = require('./isNil');\nvar create = require('./create');\nvar getTypeName = require('./getTypeName');\nvar dict = require('./dict');\nvar getDefaultInterfaceName = require('./getDefaultInterfaceName');\nvar extend = require('./extend');\nfunction getDefaultName(props) {\n  return 'Struct' + getDefaultInterfaceName(props);\n}\nfunction extendStruct(mixins, name) {\n  return extend(struct, mixins, name);\n}\nfunction getOptions(options) {\n  if (!isObject(options)) {\n    options = isNil(options) ? {} : {\n      name: options\n    };\n  }\n  if (!options.hasOwnProperty('strict')) {\n    options.strict = struct.strict;\n  }\n  if (!options.hasOwnProperty('defaultProps')) {\n    options.defaultProps = {};\n  }\n  return options;\n}\nfunction struct(props, options) {\n  options = getOptions(options);\n  var name = options.name;\n  var strict = options.strict;\n  var defaultProps = options.defaultProps;\n  if (process.env.NODE_ENV !== 'production') {\n    assert(dict(String, Function).is(props), function () {\n      return 'Invalid argument props ' + assert.stringify(props) + ' supplied to struct(props, [options]) combinator (expected a dictionary String -> Type)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to struct(props, [options]) combinator (expected a string)';\n    });\n    assert(isBoolean(strict), function () {\n      return 'Invalid argument strict ' + assert.stringify(strict) + ' supplied to struct(props, [options]) combinator (expected a boolean)';\n    });\n    assert(isObject(defaultProps), function () {\n      return 'Invalid argument defaultProps ' + assert.stringify(defaultProps) + ' supplied to struct(props, [options]) combinator (expected an object)';\n    });\n  }\n  var displayName = name || getDefaultName(props);\n  function Struct(value, path) {\n    if (Struct.is(value)) {\n      // implements idempotency\n      return value;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      path = path || [displayName];\n      assert(isObject(value), function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an object)';\n      });\n      // strictness\n      if (strict) {\n        for (k in value) {\n          if (value.hasOwnProperty(k)) {\n            assert(props.hasOwnProperty(k), function () {\n              return 'Invalid additional prop \"' + k + '\" supplied to ' + path.join('/');\n            });\n          }\n        }\n      }\n    }\n    if (!(this instanceof Struct)) {\n      // `new` is optional\n      return new Struct(value, path);\n    }\n    for (var k in props) {\n      if (props.hasOwnProperty(k)) {\n        var expected = props[k];\n        var actual = value[k];\n        // apply defaults\n        if (actual === undefined) {\n          actual = defaultProps[k];\n        }\n        this[k] = create(expected, actual, process.env.NODE_ENV !== 'production' ? path.concat(k + ': ' + getTypeName(expected)) : null);\n      }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(this);\n    }\n  }\n  Struct.meta = {\n    kind: 'struct',\n    props: props,\n    name: name,\n    identity: false,\n    strict: strict,\n    defaultProps: defaultProps\n  };\n  Struct.displayName = displayName;\n  Struct.is = function (x) {\n    return x instanceof Struct;\n  };\n  Struct.update = function (instance, patch) {\n    return new Struct(assert.update(instance, patch));\n  };\n  Struct.extend = function (xs, name) {\n    return extendStruct([Struct].concat(xs), name);\n  };\n  return Struct;\n}\nstruct.strict = false;\nstruct.getOptions = getOptions;\nstruct.getDefaultName = getDefaultName;\nstruct.extend = extendStruct;\nmodule.exports = struct;","map":null,"metadata":{},"sourceType":"script"}