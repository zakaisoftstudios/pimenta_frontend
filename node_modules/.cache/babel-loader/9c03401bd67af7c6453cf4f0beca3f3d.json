{"ast":null,"code":"var assert = require('./assert');\nvar isTypeName = require('./isTypeName');\nvar isFunction = require('./isFunction');\nvar isArray = require('./isArray');\nvar forbidNewOperator = require('./isIdentity');\nvar is = require('./is');\nvar getTypeName = require('./getTypeName');\nvar isIdentity = require('./isIdentity');\nfunction getDefaultName(types) {\n  return types.map(getTypeName).join(' & ');\n}\nfunction intersection(types, name) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert(isArray(types) && types.every(isFunction) && types.length >= 2, function () {\n      return 'Invalid argument types ' + assert.stringify(types) + ' supplied to intersection(types, [name]) combinator (expected an array of at least 2 types)';\n    });\n    assert(isTypeName(name), function () {\n      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to intersection(types, [name]) combinator (expected a string)';\n    });\n  }\n  var displayName = name || getDefaultName(types);\n  var identity = types.every(isIdentity);\n  function Intersection(value, path) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (identity) {\n        forbidNewOperator(this, Intersection);\n      }\n      path = path || [displayName];\n      assert(Intersection.is(value), function () {\n        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');\n      });\n    }\n    return value;\n  }\n  Intersection.meta = {\n    kind: 'intersection',\n    types: types,\n    name: name,\n    identity: identity\n  };\n  Intersection.displayName = displayName;\n  Intersection.is = function (x) {\n    return types.every(function (type) {\n      return is(x, type);\n    });\n  };\n  Intersection.update = function (instance, patch) {\n    return Intersection(assert.update(instance, patch));\n  };\n  return Intersection;\n}\nintersection.getDefaultName = getDefaultName;\nmodule.exports = intersection;","map":null,"metadata":{},"sourceType":"script"}