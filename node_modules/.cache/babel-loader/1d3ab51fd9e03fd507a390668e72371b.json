{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/* eslint-disable complexity */\nimport React from 'react';\nimport { getAlignmentOffset } from './utilities/style-utilities';\nvar defaultButtonStyles = function defaultButtonStyles(disabled) {\n  return {\n    border: 0,\n    background: 'rgba(0,0,0,0.4)',\n    color: 'white',\n    padding: 10,\n    textTransform: 'uppercase',\n    opacity: disabled && 0.3,\n    cursor: disabled ? 'not-allowed' : 'pointer'\n  };\n};\nexport var PreviousButton = function PreviousButton(props) {\n  var handleClick = function handleClick(event) {\n    event.preventDefault();\n    props.previousSlide();\n  };\n  var _props$defaultControl = props.defaultControlsConfig,\n    prevButtonClassName = _props$defaultControl.prevButtonClassName,\n    _props$defaultControl2 = _props$defaultControl.prevButtonStyle,\n    prevButtonStyle = _props$defaultControl2 === void 0 ? {} : _props$defaultControl2,\n    prevButtonText = _props$defaultControl.prevButtonText;\n  var disabled = props.currentSlide === 0 && !props.wrapAround || props.slideCount === 0;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: prevButtonClassName,\n    style: _objectSpread(_objectSpread({}, defaultButtonStyles(disabled)), prevButtonStyle),\n    disabled: disabled,\n    onClick: handleClick,\n    \"aria-label\": \"previous\",\n    type: \"button\"\n  }, prevButtonText || 'Prev');\n};\nexport var nextButtonDisabled = function nextButtonDisabled(_ref) {\n  var cellAlign = _ref.cellAlign,\n    cellSpacing = _ref.cellSpacing,\n    currentSlide = _ref.currentSlide,\n    frameWidth = _ref.frameWidth,\n    positionValue = _ref.positionValue,\n    slideCount = _ref.slideCount,\n    slidesToShow = _ref.slidesToShow,\n    slideWidth = _ref.slideWidth,\n    wrapAround = _ref.wrapAround,\n    scrollMode = _ref.scrollMode,\n    slidesToScroll = _ref.slidesToScroll;\n  var buttonDisabled = false;\n  if (!wrapAround) {\n    var alignmentOffset = getAlignmentOffset(currentSlide, {\n      cellAlign: cellAlign,\n      cellSpacing: cellSpacing,\n      frameWidth: frameWidth,\n      slideWidth: slideWidth\n    });\n    var relativePosition = positionValue - alignmentOffset;\n    var width = slideWidth + cellSpacing;\n    var endOffset = cellAlign === 'center' ? 2 * alignmentOffset : alignmentOffset;\n    var endPosition = -width * slideCount + width * slidesToShow - endOffset;\n    buttonDisabled = relativePosition < endPosition || Math.abs(relativePosition - endPosition) < 0.01;\n  } // return true if its last slide or slideCount =0\n\n  var lastSlide = currentSlide > 0 && currentSlide + slidesToScroll >= slideCount;\n  if (lastSlide && !wrapAround && scrollMode === 'remainder' || slideCount === 0) {\n    return buttonDisabled = true;\n  }\n  return buttonDisabled;\n};\nexport var NextButton = function NextButton(props) {\n  var handleClick = function handleClick(event) {\n    event.preventDefault();\n    props.nextSlide();\n  };\n  var cellAlign = props.cellAlign,\n    cellSpacing = props.cellSpacing,\n    currentSlide = props.currentSlide,\n    defaultControlsConfig = props.defaultControlsConfig,\n    frameWidth = props.frameWidth,\n    left = props.left,\n    slideCount = props.slideCount,\n    slidesToShow = props.slidesToShow,\n    slideWidth = props.slideWidth,\n    top = props.top,\n    vertical = props.vertical,\n    wrapAround = props.wrapAround,\n    scrollMode = props.scrollMode,\n    slidesToScroll = props.slidesToScroll;\n  var nextButtonClassName = defaultControlsConfig.nextButtonClassName,\n    _defaultControlsConfi = defaultControlsConfig.nextButtonStyle,\n    nextButtonStyle = _defaultControlsConfi === void 0 ? {} : _defaultControlsConfi,\n    nextButtonText = defaultControlsConfig.nextButtonText;\n  var disabled = nextButtonDisabled({\n    cellAlign: cellAlign,\n    cellSpacing: cellSpacing,\n    currentSlide: currentSlide,\n    frameWidth: frameWidth,\n    positionValue: vertical ? top : left,\n    slideCount: slideCount,\n    slidesToShow: slidesToShow,\n    slideWidth: slideWidth,\n    wrapAround: wrapAround,\n    scrollMode: scrollMode,\n    slidesToScroll: slidesToScroll\n  });\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: nextButtonClassName,\n    style: _objectSpread(_objectSpread({}, defaultButtonStyles(disabled)), nextButtonStyle),\n    disabled: disabled,\n    onClick: handleClick,\n    \"aria-label\": \"next\",\n    type: \"button\"\n  }, nextButtonText || 'Next');\n};\nexport var getDotIndexes = function getDotIndexes(slideCount, slidesToScroll, slidesToShow, cellAlign) {\n  var dotIndexes = [];\n  var lastDotIndex = slideCount - slidesToShow;\n  var slidesToShowIsDecimal = slidesToShow % 1 !== 0;\n  switch (cellAlign) {\n    case 'center':\n    case 'right':\n      lastDotIndex += slidesToShow - 1;\n      break;\n  } // the below condition includes the last index if slidesToShow is decimal\n\n  if (cellAlign === 'left' && slidesToShowIsDecimal) {\n    lastDotIndex += slidesToShow - 1;\n  }\n  if (lastDotIndex < 0) {\n    return [0];\n  }\n  var scrollSlides = slidesToScroll === 0 ? 1 : slidesToScroll;\n  for (var i = 0; i < lastDotIndex; i += scrollSlides) {\n    dotIndexes.push(i);\n  } // the below condition includes the last index if slidesToShow is not decimal and cellAlign = left\n\n  if (cellAlign === 'left' && !slidesToShowIsDecimal) {\n    lastDotIndex = slideCount - (slideCount % slidesToShow || slidesToShow);\n  }\n  if (!dotIndexes.includes(lastDotIndex)) {\n    dotIndexes.push(lastDotIndex);\n  }\n  return dotIndexes;\n};\nexport var PagingDots = function PagingDots(props) {\n  var getListStyles = function getListStyles() {\n    return {\n      position: 'relative',\n      top: -10,\n      display: 'flex',\n      margin: 0,\n      padding: 0,\n      listStyleType: 'none'\n    };\n  };\n  var getButtonStyles = function getButtonStyles(active) {\n    return {\n      cursor: 'pointer',\n      opacity: active ? 1 : 0.5,\n      background: 'transparent',\n      border: 'none',\n      fill: 'black'\n    };\n  };\n  var indexes = getDotIndexes(props.slideCount, props.slidesToScroll, props.slidesToShow, props.cellAlign);\n  var _props$defaultControl3 = props.defaultControlsConfig,\n    pagingDotsContainerClassName = _props$defaultControl3.pagingDotsContainerClassName,\n    pagingDotsClassName = _props$defaultControl3.pagingDotsClassName,\n    _props$defaultControl4 = _props$defaultControl3.pagingDotsStyle,\n    pagingDotsStyle = _props$defaultControl4 === void 0 ? {} : _props$defaultControl4;\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: pagingDotsContainerClassName,\n    style: getListStyles()\n  }, indexes.map(function (index, i) {\n    var isActive = props.currentSlide === index; // the below condition checks and sets navigation dots active if the current slide falls in the current index range\n\n    if (props.currentSlide < index && props.currentSlide > indexes[i - 1]) {\n      isActive = true;\n    }\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      className: isActive ? 'paging-item active' : 'paging-item'\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: pagingDotsClassName,\n      type: \"button\",\n      style: _objectSpread(_objectSpread({}, getButtonStyles(isActive)), pagingDotsStyle),\n      onClick: props.goToSlide.bind(null, index),\n      \"aria-label\": \"slide \".concat(index + 1, \" bullet\"),\n      \"aria-selected\": isActive\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      className: \"paging-dot\",\n      width: \"6\",\n      height: \"6\",\n      \"aria-hidden\": \"true\",\n      focusable: \"false\"\n    }, /*#__PURE__*/React.createElement(\"circle\", {\n      cx: \"3\",\n      cy: \"3\",\n      r: \"3\"\n    }))));\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}